<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GAMS.net4</name>
    </assembly>
    <members>
        <member name="T:gamsglobals">
            <summary>
            Collection of global constants
            </summary>
        </member>
        <member name="F:gamsglobals.maxdim">
            <summary>
            Maximum GAMS symobl dimension
            </summary>
        </member>
        <member name="F:gamsglobals.str_len">
            <summary>
            ShortString length
            </summary>
        </member>
        <member name="F:gamsglobals.val_level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:gamsglobals.val_marginal">
            <summary>
            Marginal
            </summary>
        </member>
        <member name="F:gamsglobals.val_lower">
            <summary>
            Lower Bound
            </summary>
        </member>
        <member name="F:gamsglobals.val_upper">
            <summary>
            Upper Bound
            </summary>
        </member>
        <member name="F:gamsglobals.val_scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="F:gamsglobals.val_max">
            <summary>
            Val Max
            </summary>
        </member>
        <member name="F:gamsglobals.sv_und">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:gamsglobals.sv_na">
            <summary>
            Not Applicable
            </summary>
        </member>
        <member name="F:gamsglobals.sv_pin">
            <summary>
            Plus Infinity
            </summary>
        </member>
        <member name="F:gamsglobals.sv_min">
            <summary>
            Minus Infinity
            </summary>
        </member>
        <member name="F:gamsglobals.sv_eps">
            <summary>
            Epsilon
            </summary>
        </member>
        <member name="F:gamsglobals.sv_normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:gamsglobals.sv_acronym">
            <summary>
            Acronym
            </summary>
        </member>
        <member name="F:gamsglobals.sv_max">
            <summary>
            SV Max
            </summary>
        </member>
        <member name="F:gamsglobals.dt_set">
            <summary>
            Set
            </summary>
        </member>
        <member name="F:gamsglobals.dt_par">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:gamsglobals.dt_var">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:gamsglobals.dt_equ">
            <summary>
            Equation
            </summary>
        </member>
        <member name="F:gamsglobals.dt_alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="F:gamsglobals.dt_max">
            <summary>
            DT Max
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valund">
            <summary>
            Default value of Undefined
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valna">
            <summary>
            Default value of Not Applicable
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valpin">
            <summary>
            Default value of Plus Infinity
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valmin">
            <summary>
            Default value of Minus Infinity
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valeps">
            <summary>
            Default value of Epsilon
            </summary>
        </member>
        <member name="F:gamsglobals.sv_valacronym">
            <summary>
            Default value of Acronym
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabaseEnumerator.#ctor(GAMS.GAMSDatabase)">
            <summary>
            Constructor
            </summary>
            <param name="database">Identifier of GAMSDatabase</param>
        </member>
        <member name="T:GAMS.EquType">
            <summary>
            Equation subtype
            </summary>
        </member>
        <member name="F:GAMS.EquType.E">
            <summary>
            Equality - =E=
            </summary>
        </member>
        <member name="F:GAMS.EquType.G">
            <summary>
            Greater or equal than inequality - =G=
            </summary>
        </member>
        <member name="F:GAMS.EquType.L">
            <summary>
            Less or equal than inequality - =L=
            </summary>
        </member>
        <member name="F:GAMS.EquType.N">
            <summary>
            Non-binding equation - =N=
            </summary>
        </member>
        <member name="F:GAMS.EquType.X">
            <summary>
            External equation - =X=
            </summary>
        </member>
        <member name="F:GAMS.EquType.C">
            <summary>
            Cone equation - =C=
            </summary>
        </member>
        <member name="T:GAMS.VarType">
            <summary>
            Variable subtype
            </summary>
        </member>
        <member name="F:GAMS.VarType.Unknown">
            <summary>
            Unknown variable type
            </summary>
        </member>
        <member name="F:GAMS.VarType.Binary">
            <summary>
            Binary variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.Integer">
            <summary>
            Integer Variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.Positive">
            <summary>
            Positive variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.Negative">
            <summary>
            Negative variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.Free">
            <summary>
            Free variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.SOS1">
            <summary>
            Special Ordered Set 1 
            </summary>
        </member>
        <member name="F:GAMS.VarType.SOS2">
            <summary>
            Special Ordered Set 2
            </summary>
        </member>
        <member name="F:GAMS.VarType.SemiCont">
            <summary>
            Semi-continuous variable
            </summary>
        </member>
        <member name="F:GAMS.VarType.SemiInt">
            <summary>
            Semi-integer variable
            </summary>
        </member>
        <member name="T:GAMS.SolveStat">
            <summary>
            Solver termination condition 
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Normal">
            <summary>
            Normal termination
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Iteration">
            <summary>
            Solver ran out of iterations
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Resource">
            <summary>
            Solver exceeded time limit 
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Solver">
            <summary>
            Solver quit with a problem 
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.EvalError">
            <summary>
            Solver quit with nonlinear term evaluation errors 
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Capability">
            <summary>
            Solver terminated because the model is beyond the solvers capabilities
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.License">
            <summary>
            Solver terminated with a license error
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.User">
            <summary>
            Solver terminated on users request (e.g. Ctrl-C)
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.SetupErr">
            <summary>
            Solver terminated on setup error
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.SolverErr">
            <summary>
            Solver terminated with error
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.InternalErr">
            <summary>
            Solver terminated with error
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.Skipped">
            <summary>
            Solve skipped
            </summary>
        </member>
        <member name="F:GAMS.SolveStat.SystemErr">
            <summary>
            Other error
            </summary>
        </member>
        <member name="T:GAMS.ModelStat">
            <summary>
            Model Solution Status
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.OptimalGlobal">
            <summary>
            Optimal solution achieved
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.OptimalLocal">
            <summary>
            Local optimal solution achieved 
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.Unbounded">
            <summary>
            Unbounded model found
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.InfeasibleGlobal">
            <summary>
            Infeasible model found 
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.InfeasibleLocal">
            <summary>
            Locally infeasible model found 
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.InfeasibleIntermed">
            <summary>
            Solver terminated early and model was still infeasible
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.Feasible">
            <summary>
            Feasible solution
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.Integer">
            <summary>
            Integer solution found
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.NonIntegerIntermed">
            <summary>
            Solver terminated early with a non integer solution found 
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.IntegerInfeasible">
            <summary>
            No feasible integer solution could be found
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.LicenseError">
            <summary>
            Licensing problem
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.ErrorUnknown">
            <summary>
            Error – No cause known
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.ErrorNoSolution">
            <summary>
            Error – No solution attained
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.NoSolutionReturned">
            <summary>
            No solution returned 
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.SolvedUnique">
            <summary>
            Unique solution in a CNS models
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.Solved">
            <summary>
            Feasible solution in a CNS models
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.SolvedSingular">
            <summary>
            Singular in a CNS models
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.UnboundedNoSolution">
            <summary>
            Unbounded – no solution
            </summary>
        </member>
        <member name="F:GAMS.ModelStat.InfeasibleNoSolution">
            <summary>
            Infeasible – no solution
            </summary>
        </member>
        <member name="T:GAMS.GAMSExitCode">
            <summary>
            GAMS exit code
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.NormalReturn">
            <summary>
            Normal Return
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.SolverToBeCalled">
            <summary>
            Solver is to be called, the system should never return this number
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CompilationError">
            <summary>
            There was a compilation error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.ExecutionError">
            <summary>
            There was an execution error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.SystemLimitsReached">
            <summary>
            System limits were reached 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.FileError">
            <summary>
            There was a file error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.ParameterError">
            <summary>
            There was a parameter error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.LicensingError">
            <summary>
            There was a licensing error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.GAMSSystemError">
            <summary>
            There was a GAMS system error 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.GAMSCouldNotBeStarted">
            <summary>
            GAMS cold not be started 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.OutOfMemory">
            <summary>
            Out of memory
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.OutOfDisk">
            <summary>
            Out of disk
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotCreateScratchDir">
            <summary>
            Could not create process/scratch directory 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.TooManyScratchDirs">
            <summary>
            Too many process/scratch directories
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotDeleteScratchDir">
            <summary>
            Could not delete process/scratch directory 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotWriteGamsNext">
            <summary>
            Could not write the "gamsnext" script 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotWriteParamFile">
            <summary>
            Could not write the "parameter" file
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotReadEnvVar">
            <summary>
            Could not read environment variable
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotSpawnGAMScmex">
            <summary>
            Could not spawn the GAMS language compiler (gamscmex) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CurDirNotFound">
            <summary>
            Current directory (curdir) does not exist 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CurDirNotSet">
            <summary>
            Cannot set current directory (curdir) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.BlankInSysDir">
            <summary>
            Blank in system directory (UNIX only) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.BlankInCurDir">
            <summary>
            Blank in current directory (UNIX only) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.BlankInScrExt">
            <summary>
            Blank in scratch extension (scrext) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.UnexpectedCmexRC">
            <summary>
            Unexpected cmexRC
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.ProcDirNotFound">
            <summary>
            Could not find the process directory (procdir)
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CmexLibNotFound">
            <summary>
            CMEX library not found (experimental) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CmexLibEPNotFound">
            <summary>
            Entry point in CMEX library not found (experimental)  
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.BlankInProcDir">
            <summary>
            Blank in process directory (UNIX only) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.BlankInScrDir">
            <summary>
            Blank in scratch directory (UNIX only) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CannotAddPath">
            <summary>
            Cannot add path / Unknown UNIX environment / Cannot set environment variable
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.MissingCommandLineParameter">
            <summary>
            Driver error: Missing command line parameter for gams.exe
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CannotInstallInterrupt">
            <summary>
            Driver error: Internal error: Cannot install interrupt handler  
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CouldNotGetCurrentDir">
            <summary>
            Driver error: Problems getting current directory (sometimes caused by specifying the current directory in Microsoft UNC format) 
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.CmexNotFound">
            <summary>
            Driver error: Internal error: GAMS compile and execute module not found
            </summary>
        </member>
        <member name="F:GAMS.GAMSExitCode.OptNotFound">
            <summary>
            Driver error: Internal error: Cannot load option handling library
            </summary>
        </member>
        <member name="T:GAMS.UpdateAction">
            <summary>
            What field to update
            </summary>
        </member>
        <member name="F:GAMS.UpdateAction.Upper">
            <summary>
            Supplies upper bounds for a variable
            </summary>
        </member>
        <member name="F:GAMS.UpdateAction.Lower">
            <summary>
            Supplies lower bounds for a variable
            </summary>
        </member>
        <member name="F:GAMS.UpdateAction.Fixed">
            <summary>
            Supplies fixed bounds for a variable
            </summary>
        </member>
        <member name="F:GAMS.UpdateAction.Primal">
            <summary>
            Supplies level for a variable or equation
            </summary>
        </member>
        <member name="F:GAMS.UpdateAction.Dual">
            <summary>
            Supplies marginal for a variable or equation
            </summary>
        </member>
        <member name="T:GAMS.DebugLevel">
            <summary>
            GAMS Debug Level
            </summary>
        </member>
        <member name="F:GAMS.DebugLevel.Off">
            <summary>
            No Debug
            </summary>
        </member>
        <member name="F:GAMS.DebugLevel.KeepFiles">
            <summary>
            Keep temporary files
            </summary>
        </member>
        <member name="F:GAMS.DebugLevel.ShowLog">
            <summary>
            Send GAMS log to stdout and keep temporary files
            </summary>
        </member>
        <member name="F:GAMS.DebugLevel.Verbose">
            <summary>
            Send highly technical info and GAMS log to stdout and keep temporary file
            </summary>
        </member>
        <member name="T:GAMS.NamespaceDoc">
             @page DOTNET_OVERVIEW .NET API
             <summary>
             <p>The GAMS namespace provides objects to interact with the General Algebraic Modeling
             System (GAMS). Objects in this namespace allow convenient exchange of input data
             and model results (GAMSDatabase), help to create and run GAMS models (GAMSJob),
             that can be customized by GAMS options (GAMSOptions). Furthermore, it
             introduces a way to solve a sequence of closely related model instances in the
             most efficient way (GAMSModelInstance).</p>
             <p>The underlying GAMS engine relies to some extent on file based communication
             (e.g. the listing file) and other unmanaged resources. The use of external
             resources in the .NET environment requires special attention. Hence, some
             objects in the GAMS namespace implement the IDisposable interface (e.g.
             GAMSDatabase) and need to be properly disposed before the .NET garbage collector
             does its job.</p>
             <p>A GAMS program can include other source files (e.g. $include), load data from
             GDX files (e.g. $GDXIN or execute_load), and create PUT files. All these files
             can be specified with a (relative) path and therefore an anchor into the file
             system is required. The base class GAMSWorkspace manages the anchor to the file
             system. If external file communication is not an issue in a particular .NET
             solution, temporary directories and files will be managed by objects in the
             namespace.</p>
             <p>With the exception of GAMSWorkspace the objects in the GAMS namespace cannot be
             accessed across different threads unless the instance is locked. The classes themself
             are thread safe and multiple objects of the class can be used from different threads
             (see below for restrictions on solvers that are not thread safe within the
             GAMSModelInstance class).</p>
             <p>Note: If you use multiple instances of the GAMSWorkspace in parallel, you should
             avoid using the same WorkingDirectory. Otherwise you may end up with conflicting
             file names.</p>
             <p>This version of the GAMS namespace lacks support for the following GAMS
             components:</p>
             <p>Acronyms, support for GAMS compilation/execution errors
             (GAMSJob.Run just throws an exception), structured access to listing file, and
             proper support for solver options.</p>
             <p>Currently only Cplex, Gurobi, and SoPlex fully utilize the power of solving
             GAMSModelInstances. Some solvers will not even work in a multi-threaded
             application using GAMSModelInstances. For some solvers this is unavoidable
             because the solver library is not thread safe (e.g.  MINOS), other solvers are
             in principle thread safe but the GAMS link is not (e.g. SNOPT). 
             Moreover, GAMSModelInstances are not available for quadratic
             model types (QCP, MIQCP, RMIQCP).</p>
             <p>This API can be used with different .NET languages. There are examples in C#,
             VB.NET and Microsoft Visual C++ using this API in [GAMS system]\\apifiles. It also
             works using MONO under Linux and Mac OS X.</p>
             </summary>
            
        </member>
        <member name="T:GAMS.GAMSException">
            <summary>
            Exception class thrown for GAMS exceptions
            </summary>
        </member>
        <member name="M:GAMS.GAMSException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:GAMS.GAMSException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Reference to the inner exception</param>
        </member>
        <member name="M:GAMS.GAMSException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:GAMS.GAMSExceptionExecution">
            <summary>
            Exception class thrown for GAMS execution exceptions
            </summary>
        </member>
        <member name="M:GAMS.GAMSExceptionExecution.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSExceptionExecution.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="exitCode">Exit Code</param>
        </member>
        <member name="M:GAMS.GAMSExceptionExecution.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Reference to the inner exception</param>
        </member>
        <member name="M:GAMS.GAMSExceptionExecution.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Info</param>
            <param name="context">Context</param>
        </member>
        <member name="P:GAMS.GAMSExceptionExecution.eRC">
            <summary>
            GAMS return code (enumerated type)
            </summary>
        </member>
        <member name="P:GAMS.GAMSExceptionExecution.iRC">
            <summary>
            GAMS return code (int)
            </summary>
        </member>
        <member name="T:GAMS.GAMSWorkspaceInfo">
            <summary>
            The GAMSWorkspaceInfo can be used input parameter for the GAMSWorkspace constructor.
            </summary>
        </member>
        <member name="F:GAMS.GAMSWorkspaceInfo.WorkingDirectory">
            <summary>
            GAMS working directory, anchor for all file-based operations
            </summary>
        </member>
        <member name="F:GAMS.GAMSWorkspaceInfo.SystemDirectory">
            <summary>
            GAMS system directory
            </summary>
        </member>
        <member name="F:GAMS.GAMSWorkspaceInfo.Debug">
            <summary>
            Debug Level
            </summary>
        </member>
        <member name="M:GAMS.GAMSWorkspaceInfo.#ctor(System.String,System.String,GAMS.DebugLevel)">
            <summary>
            Constructor
            </summary>
            <param name="workingDirectory">GAMS working directory, anchor for all file-based operations (determined automatically if omitted, in user's temporary folder)</param>
            <param name="systemDirectory">GAMS system directory (determined automatically if omitted)</param>
            <param name="debug">Debug Level</param>
        </member>
        <member name="T:GAMS.GAMSWorkspace">
            <summary>
            <p>The GAMSWorkspace is the base class in the GAMS namespace. Most objects of the
            GAMS namespace (e.g. GAMSDatabase and GAMSJob) have to be created by an "Add"
            method of GAMSWorkspace.</p>
            <p>Unless a GAMS system directory is specified during construction of
            GAMSWorkspace, GAMSWorkspace determines the location of the GAMS installation
            automatically. This is a source of potential  problems if more than one GAMS
            installation exist on the machine (see below).</p>
            <p>Furthermore, a working directory (the anchor into the file system) can be
            provided when constructing the GAMSWorkspace instance. All file based
            operation inside a GAMS model should be relative to this location (e.g. $GDXIN
            and $include). There are options to add input search paths (e.g. IDir) and
            output path (e.g. PutDir) to specify other file system locations. If no working
            directory is supplied, GAMSWorkspace creates a temporary folder and on
            instance destruction removes this temporary folder.</p>
            <p>In a typical .NET solution a single instance of GAMSWorkspace will
            suffice, since the class is thread-safe.</p>
            <p>Note: If you use multiple instances of the GAMSWorkspace in parallel, you should
            avoid using the same WorkingDirectory. Otherwise you may end up with conflicting
            file names.</p>
            <h5>Working with different GAMS Versions on one Machine</h5>
            <p>When creating a new instance of GAMSWorkspace, one way of defining the GAMS system
            directory is setting the systemDirectory parameter of the constructor accordingly. If it
            is not set, it is tried to be defined automatically. However, this can be tricky if there
            is more than on version of GAMS installed on a machine and especially if there are
            different applications running with different GAMS versions.</p>
            <p>The automatic identification relies on information left in the Windows registry by the
            GAMS installer. Hence the system directory of the last GAMS installation will be found in
            this automatic identification step. One way of resetting the information in the registry
            is running the executable "findthisgams.exe" from the directory that should be detected
            automatically. While this can be done from the outside of the application it is not much
            more convenient than the SystemDirectory argument in the GAMSWorkspace constructor. With MONO,
            first the PATH and then the (DY)LD_LIBRARY_PATH instead of the registry is checked for a
            valid GAMS system directory.</p>
            <p>If one has a very structured way of organizing the GAMS installations (e.g. following
            the GAMS default installation location) one can construct from the GAMS assembly information
            enough information to point to the best matching GAMS system directory:</p>
            <code>
              string sysdir;
              if (IntPtr.Size == 4)
                  sysdir = @"c:\GAMS\win32\" + GAMSWorkspace.APIMajorRelNumber + "." + GAMSWorkspace.APIMinorRelNumber;
              else
                  sysdir = @"c:\GAMS\win64\" + GAMSWorkspace.APIMajorRelNumber + "." + GAMSWorkspace.APIMinorRelNumber;
            </code>
            <p>This avoids the automatic identification of the GAMS system directory but might be the
            most convenient solution for systems running multiple applications using different versions
            of the GAMS.NET API together with different versions of GAMS.</p>
            </summary>
        </member>
        <member name="F:GAMS.GAMSWorkspace.ScratchFilePrefix">
            <summary>
            A string used to prefix automatically generated files
            </summary>
        </member>
        <member name="M:GAMS.GAMSWorkspace.GamsLib(System.String)">
            <summary>
            Retrieves model from GAMS Model Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.TestLib(System.String)">
            <summary>
            Retrieves model from GAMS Test Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.EmpLib(System.String)">
            <summary>
            Retrieves model from Extended Math Programming Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.DataLib(System.String)">
            <summary>
            Retrieves model from GAMS Data Utilities Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.ApiLib(System.String)">
            <summary>
            Retrieves model from GAMS API Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.FinLib(System.String)">
            <summary>
            Retrieves model from Practical Financial Optimization Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.NoaLib(System.String)">
            <summary>
            Retrieves model from Nonlinear Optimization Applications Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.PsoptLib(System.String)">
            <summary>
            Retrieves model from Power System Optimization Modelling Library
            </summary>
            <param name="model">Model name</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.#ctor(System.String,System.String,GAMS.DebugLevel)">
            <summary>
            Constructor
            </summary>
            <param name="workingDirectory">GAMS working directory, anchor for all file-based operations (determined automatically if omitted, in user's temporary folder)</param>
            <param name="systemDirectory">GAMS system directory (determined automatically if omitted)</param>
            <param name="debug">Debug Flag</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.#ctor(GAMS.GAMSWorkspaceInfo)">
            <summary>
            Constructor
            </summary>
            <param name="wsInfo">GAMSWorkspaceInfo defining GAMS working directory, GAMS system directory and Debug Flag</param>
        </member>
        <member name="M:GAMS.GAMSWorkspace.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.Version">
            <summary>
            GAMS Version used
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.MajorRelNumber">
            <summary>
            GAMS Major Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.MinorRelNumber">
            <summary>
            GAMS Minor Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.GoldRelNumber">
            <summary>
            GAMS GOLD Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.APIVersion">
            <summary>
            API Version used
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.APIMajorRelNumber">
            <summary>
            API Major Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.APIMinorRelNumber">
            <summary>
            API Minor Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.APIGoldRelNumber">
            <summary>
            API GOLD Release Number
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.MyEPS">
            <summary>
            Reset value to be stored in and read from GAMSDatabase for Epsilon, default is double.Epsilon
            </summary>
        </member>
        <member name="M:GAMS.GAMSWorkspace.CheckpointAdd(System.String)">
            <summary>
            Add GAMSCheckpoint with given name to workspace
            </summary>
            <param name="checkpointName">Checkpoint name to add</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.CheckpointAdd">
            <summary>
            Add GAMSCheckpoint with default name to workspace
            </summary>
            <returns>Checkpoint name if everything worked, else an empty string</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.CheckpointDelete(System.String)">
            <summary>
            Delete the given GAMSCheckpoint from workspace
            </summary>
            <param name="checkpointName">Name of the checkpoint to delete</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.DatabaseAdd(System.String)">
            <summary>
            Add GAMSDatabase with given name to workspace
            </summary>
            <param name="databaseName">Database name to add</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.DatabaseAdd">
            <summary>
            Add GAMSDatabase with default name to workspace
            </summary>
            <returns>Database name if everything worked, else an empty string</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.DatabaseDelete(System.String)">
            <summary>
            Delete the given GAMSDatabase from workspace
            </summary>
            <param name="databaseName">Name of the database to delete</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.JobAdd(System.String)">
            <summary>
            Add GAMSJob with given name to workspace
            </summary>
            <param name="jobName">Job name to add</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.JobAdd">
            <summary>
            Add GAMSJob with default name to workspace
            </summary>
            <returns>Job name if everything worked, else an empty string</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.JobDelete(System.String)">
            <summary>
            Delete the given GAMSJob from workspace
            </summary>
            <param name="jobName">Name of the job to delete</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.ModelInstanceAdd(System.String)">
            <summary>
            Add GAMSModelInstance with given name to workspace
            </summary>
            <param name="modelInstanceName">Model instance name to add</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.ModelInstanceAdd">
            <summary>
            Add GAMSModelInstance with default name to workspace
            </summary>
            <returns>Model instance name if everything worked, else an empty string</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.ModelInstanceDelete(System.String)">
            <summary>
            Delete the given GAMSModelInstance from workspace
            </summary>
            <param name="modelInstanceName">Name of the model instance to delete</param>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="P:GAMS.GAMSWorkspace.Debug">
            <summary>
            Get value of Debug Level
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.UsingTmpWorkingDir">
            <summary>
            Get value of UsingTmpWorkingDir flag
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.WorkingDirectory">
            <summary>
            Get the working directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSWorkspace.SystemDirectory">
            <summary>
            Get the system directory
            </summary>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddDatabaseFromGDX(System.String,System.String,System.String)">
            <summary>
            Database creation from an existing GDX file
            </summary>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="gdxFileName">GDX File to initialize Database from</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
            <returns>Reference to GAMSDatabase</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddDatabaseFromGDXForcedName(System.String,System.String,System.String)">
            <summary>
            Database creation from an existing GDX file with forced name (do not complain if the name exists already)
            </summary>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="gdxFileName">GDX File to initialize Database from</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
            <returns>Reference to GAMSDatabase</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddDatabase(System.String,System.String)">
            <summary>
            Empty Database creation
            </summary>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
            <returns>Reference to GAMSDatabase</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddDatabase(GAMS.GAMSDatabase,System.String,System.String)">
            <summary>
            Database creation from existing database
            </summary>
            <param name="sourceDatabase">Source GAMSDatabase to initialize Database from</param>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
            <returns>Reference to GAMSDatabase</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromString(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from string model source
            </summary>
            <param name="gamsSource">GAMS model as string</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromFile(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model file
            </summary>
            <param name="fileName">GAMS source file name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromGamsLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from GAMS Model Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromTestLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from GAMS Test Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromEmpLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from Extended Math Programming Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromDataLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from GAMS Data Utilities Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromFinLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from Practical Financial Optimization Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromApiLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from API Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromNoaLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from Nonlinear Optimization Applications Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddJobFromPsoptLib(System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Create GAMSJob from model from Power System Optimization Modelling Library
            </summary>
            <param name="model">Model name</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns>Handle to new instance of GAMSJob</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddCheckpoint(System.String)">
            <summary>
            Create GAMSCheckpoint
            </summary>
            <param name="checkpointName">Identifier of GAMSCheckpoint or filename for existing checkpoint (determined automatically if omitted or set to empty string)</param>
            <returns>Reference to GAMSCheckpoint</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddOptions(GAMS.GAMSOptions)">
            <summary>
            Create GAMSOptions
            </summary>
            <param name="optFrom">GAMSOptions used to initialize the new object</param>
            <returns>Reference to GAMSOptions</returns>
        </member>
        <member name="M:GAMS.GAMSWorkspace.AddOptions(System.String)">
            <summary>
            Create GAMSOptions
            </summary>
            <param name="optFile">Parameter file used to initialize the new object</param>
            <returns>Reference to GAMSOptions</returns>
        </member>
        <member name="T:GAMS.GAMSDatabaseDomainViolation">
            <summary>
            This class describes a domain violation of a GAMSDatabase.
            </summary>
        </member>
        <member name="P:GAMS.GAMSDatabaseDomainViolation.ViolSym">
            <summary>
            GAMSSymbol that has a domain violation
            </summary>
        </member>
        <member name="P:GAMS.GAMSDatabaseDomainViolation.ViolRecs">
            <summary>
            List of domain violations of symbol
            </summary>
        </member>
        <member name="T:GAMS.GAMSDatabase">
            <summary>
            <p>An instance of GAMSDatabase communicates data between the .NET world and the 
            GAMS world. A GAMSDatabase consists of a collection of symbols (GAMSDatabase 
            implements the IEnumerable interface, that allows to iterate conveniently 
            through the symbols in a GAMSDatabase). The symbol types available for a
            GAMSDatabase correspond to the symbols types know from the GAMS language: Set, 
            Parameter, Variable, and Equation are represented in .NET by a derived class 
            (e.g. GAMSSet, GAMSParameter, etc). Besides the type, a GAMSSymbol has a name 
            (this has to match the name inside the GAMS model), a dimension (currently up to
            20 or gamsglobals.maxdim) and some explanatory text.</p>
            <p>Variables and equations also have a subtype: e.g. Binary, Positive, etc. for 
            variables (see type gamsglobals.VarType) and e.g. E, G etc. for equations (see 
            type gamsglobals.EquType).</p>
            <p>GAMSDatabases can be created empty, or initialized from existing GDX files or 
            from another GAMSDatabase (copy). Symbols can be added at any time (e.g. 
            GAMSDatabase.AddParameter), but once a symbol is part of a GAMSDatabase, it 
            cannot be removed. Only its associated data (GAMSSymbolRecord) can be purged 
            (see GAMSSymbol.Clear()) or individually removed (GAMSSymbol.DeleteRecord). 
            Individual data elements are accessed record by record. A record is identified 
            by the keys (a vector of strings). The record data varies by symbol type. For 
            example, a parameter record has a Value property, a variable has the properties 
            Level, Lower, Upper, Marginal, and Scale. Adding a record with keys that already 
            exist results in an exception. Similar, the unsuccessful search for a record 
            also results in an exception.</p>
            <p>GAMSSymbol implements the IEnumerable interface to conveniently iterate through 
            the records of a symbol. There are also sliced access methods to symbol records 
            that allow to iterate through all records with a fixed index at some positions. 
            GAMSDatabases can be exported as GDX files for permanent storage. They also 
            manage external resources and need to be properly disposed before the .NET 
            garbage collector reclaims the instance.</p>
            <p>GAMSJob (OutDB) and GAMSModelInstance (SyncDB) provide instances of GAMSDatabase 
            to communicate results from a GAMS run or a solve. These databases should only 
            be used in the context of the base object (GAMSJob or GAMSModelInstance). If a 
            copy of such a database is required the GAMSDatabase constructor that 
            initializes a GAMSDatabase from another database should be used (e.g. 
            GAMSDatabase newdb = workspace.AddDatabase(GAMSJob.OutDB);).</p>
            <p>GAMSDatabases often provide the input data for a GAMSJob. Such GAMSDatabases are
            listed in the GAMSJob.Run methods. Inside the GAMS model source the GAMSDatabase 
            is accessible through a GDX file. The GAMS model source requires a particular 
            file name to connect to the proper GDX file (e.g. $GDXIN filename). A 
            GAMSDatabase can be created with a given name which can be then used inside the 
            model (e.g. GAMSDatabase db = workspace.AddDatabase(databaseName:"SupplyData"); 
            and then inside the GAMS model source: $GDXIN SupplyData) or an automatically 
            generated name can be used. This name can be passed down to the GAMS model by 
            using the Defines list of a GAMSOptions instance:</p>
            <code>
              GAMSDatabase db = workspace.AddDatabase();
              GAMSOptions opt = workspace.AddOptions();
              opt.Defines.Add("SupplyDataFileName",db.Name);
              ...
              gamsjob.Run(opt, db);
            </code>
            <p>Inside the GAMS model source the name is accessed as follows:</p>
            <code lang="GAMS">
              $GDXIN %SupplyDataFileName%
            </code>
            <p>One has to act with some caution when it comes to ordered sets which e.g. 
            allow lag and lead. By not enforcing the "domain checking" for the GAMSDatabase 
            .NET class we have aggravated the potential problems for ordered sets.
            For GAMS, the labels of set elements are just strings, so the order of a set is 
            determined by the appearance of its elements. For example, if one has 'set k 
            / 2,3,4,1,5 /', the order of k is exactly given by this sequence. So the lag (k-1)
            of k=4 is 3 and the lead (k+1) of k=4 is 1.</p>
            <p>GAMS performs arithmetic with an extended number range. GAMS has special values 
            for infinity (+INF, -INF), epsilon (EPS), not available (NA), and undefined (UNDEF). 
            When GAMS evaluates expressions with these special values, the calculating engine 
            ensures the correctness of the result (e.g. 5*eps=eps or 5+eps=5). The GAMS model 
            CRAZY in the GAMS Model Library documents the results of the arithmetic operations 
            with respect to special values.</p>
            <p>In the GAMS .NET API we map the IEEE standard values for +/-infinity (e.g. 
            double.PositiveInfinity) and NA (double.NaN) to the corresponding GAMS values. The 
            special value for UNDEF gets unfiltered through the GAMS .NET API. The internal 
            double value of UNDEF is 1.0E300 (or better use the constant sv_valund from gamsglobals).</p>
            <p>Special attention needs to be given to the value of 0. Since GAMS is a sparse system 
            it does not store (parameter) records with a true 0. If a record with numerical value of 
            0 is needed, EPS can help. For example:</p>
            <code lang="GAMS">
            set j /1*10 /; parameter b(j); b(j) = 1; b('5') = 0;
            scalar s,c; s = sum(j, b(j)); c = card(b); display s,c;
            </code>
            <p>will result in</p>
            <code lang="GAMS">
            ----      3 PARAMETER s                    =        9.000
                        PARAMETER c                    =        9.000
            </code>
            <p>but</p> 
            <code lang="GAMS">
            b(j) = 1; b('5') = EPS;
            </code>
            <p>will result in</p>
            <code lang="GAMS">
            ----      3 PARAMETER s                    =        9.000
                        PARAMETER c                    =       10.000
            </code>
            <p>What are the consequences for the GAMS .NET API? If we read parameter b in case of b('5')=0, 
            the GAMSDatabase will not have a record for b('5'). In case of b('5')=EPS, the GAMSDatabase will 
            have a record with value double.Epsilon. Unlike the IEEE values (e.g. double.PositivInfinity), 
            arithmetic operations in .NET will modify double.Epsilon (e.g. 5*double.PositiveInfinity==double.PositiveInfinity 
            but 5*double.Epsilon!=double.Epsilon). The same rules apply for preparing input data for GAMS 
            in a GAMSDatabase. If a value of double.Epsilon is written, GAMS will see the special value EPS.
            The value used for EPS can be reset using the GAMSWorkspace property MyEPS.
            All other small values (including 0) will be communicated unfiltered to GAMS. As mentioned before, 
            zeros will not be entered as data records in GAMS. The compiler control $on/offEPS can help to 
            automatically map zeros to EPS.</p>
            <p>There is one oddity concerning values smaller than 1e-250 on GAMS input. Consider the following example:</p>
            <code>
            GAMSParameter b = db.AddGAMSParameter("b",1,"");
            for(int i=1; i &lt; 11; i++) b.AddRecord(i.ToString()).Value = 1;
            b.FindRecord("5").Value = 1e-251;
            job.Run(db);
            </code>
            <code lang="GAMS">
            $load j b
            scalar card_b; card_b = card(b); display card_b;
            b(j) = 2*b(j); card_b = card(b); display card_b;
            </code>
            <p>A record with values smaller than 1e-250 exists on input in GAMS, but as soon as the record gets 
            updated by GAMS and is still smaller than 1e-250, the record gets removed.</p>
            <p>The ordering of a set in GAMS can be non-intuitive: Consider "set i /5/, j /1*5/;". 
            Elements '5' gets internal number 1, '1' get 2, '2' gets 3 and so on. The last element 
            of j '5' has already the internal number 1. The sequence of internal numbers in j is 
            not ascending and hence GAMS considers set j as not sorted, i.e. one can't use the 
            ord() function nor the lag or lead (-,--,+,++) operators. If 'j' would have been defined 
            before 'i' in this example, the "set not ordered" problem would have been avoided.</p>
            <p>Please note that the GAMSDatabase actually does not implement a relational model for
            database management. It should be seen as a data storage or data container.</p>
            </summary>
        </member>
        <member name="P:GAMS.GAMSDatabase.SuppressAutoDomainChecking">
            <summary>
            Controls whether domain checking is called in GAMSDatabase export
            </summary>
        </member>
        <member name="P:GAMS.GAMSDatabase.NrSymbols">
            <summary>
            Retrieve the number of symbols in the GAMSDatabase
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabase.#ctor(GAMS.GAMSWorkspace,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="workspace">GAMSWorkspace containing GAMSDatabase</param>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
            <param name="forceName">Set to true to force given file name, even if it exits already</param>
        </member>
        <member name="M:GAMS.GAMSDatabase.#ctor(GAMS.GAMSWorkspace,GAMS.GAMSDatabase,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="workspace">GAMSWorkspace containing GAMSDatabase</param>
            <param name="sourceDatabase">Source GAMSDatabase to initialize Database from</param>
            <param name="databaseName">Identifier of GAMSDatabase (determined automatically if omitted)</param>
            <param name="inModelName">GAMS string constant that is used to access this database</param>
        </member>
        <member name="P:GAMS.GAMSDatabase.Workspace">
            <summary>
            Get GAMSWorkspace containing GAMSDatabase
            </summary>
        </member>
        <member name="P:GAMS.GAMSDatabase.Name">
            <summary>
            Get GAMSDatabase name
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabase.Export(System.String)">
            <summary>
            Write database into a GDX file
            </summary>
            <param name="filePath">The path used to write the GDX file.
            A relative path is relative to the GAMS working directory.
            If not present, the file is written to the working directory using the name of the database.
            </param>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetSymbol(System.String)">
            <summary>
            Get GAMSSymbol by name
            </summary>
            <param name="symbolIdentifier">Name of the symbol to retrieve</param>
            <returns>Reference to symobl</returns>
            <example>
            <code>
            GAMSSymbol symbol = database.getSymbol("a");
            if(symbol is GAMSParameter)
            {
                GAMSParameter param = (GAMSParameter) symbol;
            }
            if(symbol is GAMSSet)
            {
                GAMSSet set = (GAMSSet) symbol;
            }   
            if(symbol is GAMSVariable)
            {
                GAMSVariable variable = (GAMSVariable) symbol;
            }
            if (symbol is GAMSEquation)
            {
                GAMSEquation equation = (GAMSEquation)symbol;
            }
            </code>
            </example>
            <seealso cref="M:GAMS.GAMSDatabase.GetParameter(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetSet(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetVariable(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetEquation(System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetParameter(System.String)">
            <summary>
            Get GAMSParameter by name
            </summary>
            <param name="parameterIdentifier">Name of the parameter to retrieve</param>
            <returns>Reference to parameter</returns>
            <seealso cref="M:GAMS.GAMSDatabase.GetSymbol(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetSet(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetVariable(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetEquation(System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetSet(System.String)">
            <summary>
            Get GAMSSet by name
            </summary>
            <param name="setIdentifier">Name of the set to retrieve</param>
            <returns>Reference to set</returns>
            <seealso cref="M:GAMS.GAMSDatabase.GetSymbol(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetParameter(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetVariable(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetEquation(System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetVariable(System.String)">
            <summary>
            Get GAMSVariable by name
            </summary>
            <param name="variableIdentifier">Name of the variable to retrieve</param>
            <returns>Reference to variable</returns>
            <seealso cref="M:GAMS.GAMSDatabase.GetSymbol(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetParameter(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetSet(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetEquation(System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetEquation(System.String)">
            <summary>
            Get GAMSEquation by name
            </summary>
            <param name="equationIdentifier">Name of the equation to retrieve</param>
            <returns>Reference to equation</returns>
            <seealso cref="M:GAMS.GAMSDatabase.GetSymbol(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetParameter(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetSet(System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.GetVariable(System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.Clear">
            <summary>
            Clear all symbols in GAMSDatabase
            </summary>
            <returns></returns>
        </member>
        <member name="M:GAMS.GAMSDatabase.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabase.Dispose">
            <summary>
            Free unmanaged ressources.
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddEquation(System.String,System.Int32,GAMS.EquType,System.String)">
            <summary>
            Add equation symbol to database
            </summary>
            <param name="identifier">Equation name</param>
            <param name="dimension">Equation dimension</param>
            <param name="equType">Equation subtype (E: Equal, G: Greater, L: Less, N: No specification, X: External defined, C: Conic)</param>
            <param name="explanatoryText">Explanatory text of equation</param>
            <returns>Reference to equation</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.Int32,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.Int32,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,System.Int32,GAMS.VarType,System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddEquation(System.String,GAMS.EquType,System.String,System.Object[])">
            <summary>
            Add equation symbol to database
            </summary>
            <param name="identifier">Equation name</param>
            <param name="equType">Equation subtype (E: Equal, G: Greater, L: Less, N: No specification, X: External defined, C: Conic)</param>
            <param name="explanatoryText">Explanatory text of equation</param>
            <param name="domains">Equation domains</param>
            <returns>Reference to equation</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,GAMS.VarType,System.String,System.Object[])"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddParameter(System.String,System.Int32,System.String)">
            <summary>
            Add parameter symbol to database
            </summary>
            <param name="identifier">Parameter name</param>
            <param name="dimension">Parameter dimension</param>
            <param name="explanatoryText">Explanatory text of parameter</param>
            <returns>Reference to parameter</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,System.Int32,GAMS.EquType,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.Int32,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,System.Int32,GAMS.VarType,System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddParameter(System.String,System.String,System.Object[])">
            <summary>
            Add parameter symbol to database
            </summary>
            <param name="identifier">Parameter name</param>
            <param name="explanatoryText">Explanatory text of parameter</param>
            <param name="domains">Parameter domains</param>
            <returns>Reference to parameter</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,GAMS.EquType,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,GAMS.VarType,System.String,System.Object[])"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddSet(System.String,System.Int32,System.String)">
            <summary>
            Add set symbol to database
            </summary>
            <param name="identifier">Set name</param>
            <param name="dimension">Set dimension</param>
            <param name="explanatoryText">Explanatory text of set</param>
            <returns>Reference to set</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,System.Int32,GAMS.EquType,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.Int32,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,System.Int32,GAMS.VarType,System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddSet(System.String,System.String,System.Object[])">
            <summary>
            Add set symbol to database
            </summary>
            <param name="identifier">Set name</param>
            <param name="explanatoryText">Explanatory text of set</param>
            <param name="domains">Set domains</param>
            <returns>Reference to set</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddVariable(System.String,GAMS.VarType,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,GAMS.EquType,System.String,System.Object[])"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddVariable(System.String,System.Int32,GAMS.VarType,System.String)">
            <summary>
            Add variable symbol to database
            </summary>
            <param name="identifier">Variable name</param>
            <param name="dimension">Variable dimension</param>
            <param name="varType">Variable subtype (Binary, Integer, Positive, Negative, Free, SOS1, SOS2, SemiCont, SemiInt,)</param>
            <param name="explanatoryText">Explanatory text to variable</param>
            <returns>Reference to variable</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,System.Int32,GAMS.EquType,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.Int32,System.String)"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.AddVariable(System.String,GAMS.VarType,System.String,System.Object[])">
            <summary>
            Add variable symbol to database
            </summary>
            <param name="identifier">Variable name</param>
            <param name="varType">Variable subtype (Binary, Integer, Positive, Negative, Free, SOS1, SOS2, SemiCont, SemiInt,)</param>
            <param name="explanatoryText">Explanatory text of variable</param>
            <param name="domains">Variable domains</param>
            <returns>Reference to variable</returns>
            <seealso cref="M:GAMS.GAMSDatabase.AddParameter(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddSet(System.String,System.String,System.Object[])"/>
            <seealso cref="M:GAMS.GAMSDatabase.AddEquation(System.String,GAMS.EquType,System.String,System.Object[])"/>
        </member>
        <member name="M:GAMS.GAMSDatabase.CheckDomains">
            <summary>
            Check for all symbols if all records are within the specified domain of the symbol
            </summary>
            <returns>True: Everything is correct, False: There is a domain violation</returns>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetDatabaseDVs(System.Int32,System.Int32)">
            <summary>
            Return all GAMSDatabaseDomainViolations
            </summary>
            <param name="MaxViol">The maximum number of domain violations which should be stored (0 for no limit)</param>
            <param name="MaxViolPerSym">The maximum number of domain violations which should be stored per Symbol (0 for no limit)</param>
            <returns>List of GAMSDatabaseDomainViolations</returns>
        </member>
        <member name="M:GAMS.GAMSDatabase.Compact">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:GAMS.GAMSDatabase.GetEnumerator">
            <summary>
            Get Enumerator to iterate through the symbols of the database
            </summary>
            <returns>database enumerator</returns>
        </member>
        <member name="T:GAMS.GAMSEquation">
            <summary>
            This is the representation of an equation symbol in GAMS. It exists in a
            GAMSDatabase and contains GAMSEquationRecords which one can iterate through.
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquation.EquType">
            <summary>
            Retrieve subtype of Equation (E: Equal, G: Greater, L: Less, N: No specification, X: External defined, C: Conic)
            </summary>
        </member>
        <member name="M:GAMS.GAMSEquation.#ctor(GAMS.GAMSDatabase,System.String,System.Int32,GAMS.EquType,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="identifier">Equation name</param>
            <param name="dimension">Equation dimension</param>
            <param name="equType">Equation subtype (E: Equal, G: Greater, L: Less, N: No specification, X: External defined, C: Conic)</param>
            <param name="explanatoryText">Explanatory text to equation</param>
            <param name="domains">Parameter domains</param>
        </member>
        <member name="M:GAMS.GAMSEquation.AddRecord(System.String[])">
            <summary>
            Add record to GAMSEquation
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.FindRecord(System.String[])">
            <summary>
            Find record in GAMSEquation
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.MergeRecord(System.String[])">
            <summary>
             Finds record in GAMSEquation if it exists, adds it if not
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.FirstRecord">
            <summary>
            Retrieve first record in GAMSEquation
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.FirstRecord(System.String[])">
            <summary>
            Retrieve a slice of the first record in GAMSEquation
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.LastRecord">
            <summary>
            Retrieve last record in GAMSEquation
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSEquation.LastRecord(System.String[])">
            <summary>
            Retrieve a slice of the last record in GAMSEquation
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="T:GAMS.GAMSEquationRecord">
            <summary>
            This is the representation of a single record of a GAMSEquation.
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Equation">
            <summary>
            Return equation where this record belongs to
            </summary>
        </member>
        <member name="M:GAMS.GAMSEquationRecord.#ctor(GAMS.GAMSEquationRecord)">
            <summary>
            Constructor
            </summary>
            <param name="record">GAMSEquationRecord to initialize this instance from</param>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Level">
            <summary>
            Get: Retrieve the the level of this GAMSEquationRecord
            Set: Set the level of this GAMSEquationRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Marginal">
            <summary>
            Get: Retrieve the marginal of this GAMSEquationRecord
            Set: Set the marginal of this GAMSEquationRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Upper">
            <summary>
            Get: Retrieve the upper bound of this GAMSEquationRecord
            Set: Set the upper bound of this GAMSEquationRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Lower">
            <summary>
            Get: Retrieve the lower bound of this GAMSEquationRecord
            Set: Set the lower bound of this GAMSEquationRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSEquationRecord.Scale">
            <summary>
            Get: Retrieve the scale factor of this GAMSEquationRecord
            Set: Set the scale factor of this GAMSEquationRecord
            </summary>
        </member>
        <member name="T:GAMS.GAMSJob">
            <summary>
            <p>The GAMSJob class manages the execution of a GAMS program given by GAMS model 
            source. The GAMS source (or more precisely the root of a model source tree) of
            the job can be provided as a string or by a filename (relative to the working 
            directory of the GAMSWorkspace) of a text file containing the GAMS model source.
            The Run method organizes the export of the input GAMSDatabases, calls the GAMS 
            compiler and execution system with the supplied options and on successful 
            completion provides through the property OutDB (of type GAMSDatabase) the 
            results of the model run.</p>
            <p>While the result data is captured in a GAMSDatabase, the Run method can also 
            create a GAMSCheckpoint that not only captures data but represents the state of
            the entire GAMSJob and allows some other GAMSJob to continue from this state. 
            In case of a compilation or execution error, the Run method will throw an 
            exception. If the log output of GAMS is of interest, this can be captured by 
            providing a TextWriter instance.</p>
            <p>A GAMSJob is connected to external resources and needs to be properly 
            disposed before the .NET garbage collector can claim the instance.</p>
            </summary>
        </member>
        <member name="M:GAMS.GAMSJob.#ctor(GAMS.GAMSWorkspace,System.String,System.String,GAMS.GAMSCheckpoint)">
            <summary>
            Constructor
            </summary>
            <param name="workspace">GAMSWorkspace containing GAMSJob</param>
            <param name="jobName">Identifier of GAMSJob</param>
            <param name="fileName">File name</param>
            <param name="checkpoint">GAMSCheckpoint</param>
        </member>
        <member name="M:GAMS.GAMSJob.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSJob.FromString(GAMS.GAMSWorkspace,System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Retrieve GAMSJob by string
            </summary>
            <param name="workspace">GAMSWorkspace containing to GAMSJob</param>
            <param name="gamsSource">GAMS model as string</param>
            <param name="checkpoint">GAMSCheckpoint to initialize GAMSJob from (determined automatically if omitted)</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns></returns>
        </member>
        <member name="M:GAMS.GAMSJob.FromFile(GAMS.GAMSWorkspace,System.String,GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Retrieve GAMSJob by file name
            </summary>
            <param name="workspace">GAMSWorkspace containing to GAMSJob</param>
            <param name="fileName">GAMS source file name</param>
            <param name="checkpoint">GAMSCheckpoint (determined automatically if omitted)</param>
            <param name="jobName">Job name (determined automatically if omitted)</param>
            <returns></returns>
        </member>
        <member name="P:GAMS.GAMSJob.Name">
            <summary>
            Retrieve name of GAMSJob
            </summary>
        </member>
        <member name="P:GAMS.GAMSJob.Workspace">
            <summary>
            Get GAMSWorkspace containing GAMSJob
            </summary>
        </member>
        <member name="P:GAMS.GAMSJob.OutDB">
            <summary>
            Get GAMSDatabase created by Run method
            </summary>
        </member>
        <member name="M:GAMS.GAMSJob.Interrupt">
            <summary>
            Send interrupt signal to running GAMSJob
            </summary>
            <returns>True meaning "the signal was sent", false meaning "there is no Job running"</returns>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSCheckpoint,System.IO.TextWriter,System.Boolean)">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSCheckpoint,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(System.IO.TextWriter,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="output">Stream to capture GAMS log</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSCheckpoint,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,System.IO.TextWriter,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSCheckpoint,System.IO.TextWriter,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSCheckpoint,System.IO.TextWriter,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSCheckpoint,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(System.IO.TextWriter,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="output">Stream to capture GAMS log</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSCheckpoint,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,System.IO.TextWriter,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSCheckpoint,System.IO.TextWriter,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="M:GAMS.GAMSJob.Run(GAMS.GAMSOptions,GAMS.GAMSCheckpoint,System.IO.TextWriter,System.Boolean,GAMS.GAMSDatabase[])">
            <summary>
            Run GAMSJob
            </summary>
            <param name="gamsOptions">GAMS options to control job</param>
            <param name="checkpoint">GAMSCheckpoint to be created by GAMSJob</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="createOutDB">Flag to define if OutDB should be created</param>
            <param name="databases">GAMSDatabases read by the GAMSJob</param>
        </member>
        <member name="T:GAMS.GAMSModelInstanceOpt">
            <summary>
            The GAMSModelInstanceOpt can be used to customize the GAMSModelInstance.Solve() routine.
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstanceOpt.Solver">
            <summary>
            GAMS Solver
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstanceOpt.OptFile">
            <summary>
            GAMS Optionfile number
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstanceOpt.NoMatchLimit">
            <summary>
            Controls the maximum number of accepted unmatched scenario records before terminating the solve
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstanceOpt.Debug">
            <summary>
            Debug Flag
            </summary>
        </member>
        <member name="M:GAMS.GAMSModelInstanceOpt.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="solver">GAMS Solver</param>
            <param name="optfile">GAMS Optionfile number</param>
            <param name="noMatchLimit">Controls the maximum number of accepted unmatched scenario records before terminating the solve</param>
            <param name="debug">Debug Flag</param>
        </member>
        <member name="T:GAMS.GAMSModifier">
            <summary>
            Instances of this class are input to GAMSModelInstance.Instatiate. A GAMSModifier consists either
            of a GAMSParameter or a triple: A GAMSVariable or GAMSEquation to be modified, the modification
            action (e.g. . Upper, Lower or Fixed for updating bounds of a variable, or Primal/Dual for updating
            the level/marginal of a variable or equation mainly used for starting non-linear models from different
            starting points), and a GAMSParameter that holds the data for modification. In addition the UpdateType
            can be defined (if ommitted the type defined in the Solve call is used).
            </summary>
        </member>
        <member name="M:GAMS.GAMSModifier.#ctor(GAMS.GAMSSymbol,GAMS.UpdateAction,GAMS.GAMSParameter,GAMS.GAMSModelInstance.SymbolUpdateType)">
            <summary>
            Constructor
            </summary>
            <param name="gamsSym">Symbol in the GAMS model to be modified</param>
            <param name="updAction">Modification action</param>
            <param name="dataSym">Parameter containing the data for the modification</param>
            <param name="updType">Symbol Update Type</param>
        </member>
        <member name="M:GAMS.GAMSModifier.#ctor(GAMS.GAMSParameter,GAMS.GAMSModelInstance.SymbolUpdateType)">
            <summary>
            Constructor
            </summary>
            <param name="gamsPar">Parameter in the GAMS model to be modified with data for modification</param>
            <param name="updType">Symbol Update Type</param>
        </member>
        <member name="P:GAMS.GAMSModifier.GamsSym">
            <summary>
            Symbol in the GAMS model to be modified
            </summary>
        </member>
        <member name="P:GAMS.GAMSModifier.UpdAction">
            <summary>
            Type of modification
            </summary>
        </member>
        <member name="P:GAMS.GAMSModifier.DataSym">
            <summary>
            Symbol containing the data for the modification
            </summary>
        </member>
        <member name="P:GAMS.GAMSModifier.UpdType">
            <summary>
            Symbol Update Type
            </summary>
        </member>
        <member name="T:GAMS.GAMSModelInstance">
             <summary>
             <p>The GAMSJob class is the standard  way of dealing with a GAMS model and the
             corresponding solution provided by a solver. The GAMS language provides
             programming flow that allows to solve models in a loop and do other
             sophisticated tasks, like building decomposition algorithms.</p>
             <p>In rare cases, the GAMS model generation time dominates the solver solution time
             and GAMS itself becomes the bottleneck in an optimization application. For a
             model instance which is a single mathematical model generated by a GAMS solve
             statement, the GAMSModelInstance class provides a controlled way of modifying a
             model instance and solving the resulting problem in the most efficient way, by
             communicating only the changes of the model to the solver and doing a hot start
             (in case of a continuous model like LP) without the use of disk IO.</p>
             <p>The GAMSModelInstance requires a GAMSCheckpoint that contains the model
             definition. Significant parts of the GAMS solve need to be provided for the
             instantiation of the GAMSModelInstance. The modification of the model instance is
             done through data in SyncDB (a property of GAMSModelInstance of type GAMSDatabase).
             One needs to create GAMSModifiers which contain the information on how to modify
             the GAMSModelInstance. Such a GAMSModifier consists either of a GAMSParameter or
             of a triple with the GAMSVariable or GAMSEquation to be updated, the modification
             action (e.g. Upper, Lower or Fixed for updating bounds of a variable, or Primal/Dual
             for updating the level/marginal of a variable or equation mainly used for starting
             non-linear models from different starting points), and a GAMSParameter that holds
             the data for modification. GAMSSymbols of a GAMSModifier must belong to SyncDB.
             The list of GAMSModifiers needs to be supplied on the Instantiate call. The use of
             GAMSParameters that are GAMSModifiers is restricted in the GAMS model source. For
             example, the parameter cannot be used inside $(). Such parameters become endogenous
             to the model and will be treated by the GAMS compiler as such. Moreover, the rim of
             the model instance is fixed: No addition of variables and equations is possible.</p>
             <p>The Instantiate call will only query the symbol information of the GAMSModifiers,
             not the data of SyncDB, e.g. to retrieve the dimension of the modifiers. That's why
             the modifier symbols have to exist (but don't have to have data) in SyncDB when
             Instantiate is called. The GAMSParameters that contain the update data in SyncDB can
             be filled at any time before executing the Solve method. The Solve method uses this
             data to update the model instance. The Solve method will iterate through all records
             of modifier symbols in the model instance and try to find update data in SyncDB. If
             a record in SyncDB is found, this data record will be copied into the model instance.
             If no corresponding record is found in SyncDB there are different choices: 1) the
             original data record is restored (UpdateType=BaseCase) which is the default, 2) the
             default record of a GAMSParameter (which is 0)  is used (UpdateType=Zero, and 3) no
             copy takes place and we use the previously copied record value (UpdateType=Accumulate).
             After the model instance has been updated, the model is passed to the selected solver.</p>
             <p>After the completion of the Solve method, the SyncDB will contain the primal and
             dual solution of the model just solved. Moreover, the GAMSParameters that are
             GAMSModifiers are also accessible in SyncDB as GAMSVariables with the name of the
             GAMSParameter plus "_var". The Marginal of this GAMSVariable can provide sensitivity
             information about the parameter setting. The status of the solve is accessible through
             the ModelStatus and SolveStatus properties.</p>
             <p>A GAMSModelInstance is connected to external resources and needs to be properly
             disposed before the .NET garbage collector can claim the instance.</p>
             <p>In general, file operations in GAMS .Net take place in the WorkingDirectory
             defined in the GAMSWorkspace. Execptions to this rule are files read or created
             due to solver specific options in the solve routine of GAMSModelInstance. These files
             are written to (or read from) the current directory, meaning the directory where
             the application gets executed. If required, the current directory can be changed inside
             an application using the method System.IO.Directory.SetCurrentDirectory(string path).</p>
             </summary>
             <example>
             Example on how to create a GAMSModelInstance from a GAMSCheckpoint that was
             generated by the Run method of GAMSJob.
             <code>
             GAMSWorkspace ws = new GAMSWorkspace();
             GAMSCheckpoint cp = ws.AddCheckpoint();
            
             ws.GamsLib("trnsport");
            
             GAMSJob job = ws.AddJobFromFile("trnsport.gms");
             job.Run(cp);
            
             GAMSModelInstance mi = cp.AddModelInstance();
             GAMSParameter b = mi.SyncDB.AddParameter("b", 1, "demand");
            
             mi.Instantiate("transport use lp min z", new GAMSModifier(b));
            
             double[] bmult = new double[] { 0.7, 0.9, 1.1, 1.3 };
             foreach (double bm in bmult)
             {
                 b.Clear();
                 foreach (GAMSParameterRecord rec in job.OutDB.GetParameter("b"))
                     b.AddRecord(rec.Keys).Value = rec.Value * bm;
                 mi.Solve();
                 Console.WriteLine("Scenario bmult=" + bm + ":");
                 Console.WriteLine("  Modelstatus: " + mi.ModelStatus);
                 Console.WriteLine("  Solvestatus: " + mi.SolveStatus);
                 Console.WriteLine("  Obj: " + mi.SyncDB.GetVariable("z").FindRecord().Level);
             }
             </code>
             </example>
        </member>
        <member name="M:GAMS.GAMSModelInstance.#ctor(GAMS.GAMSCheckpoint,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="checkpoint">GAMSCheckpoint</param>
            <param name="modelInstanceName">Identifier of GAMSModelInstance (determined automatically if omitted)</param>
        </member>
        <member name="M:GAMS.GAMSModelInstance.CopyModelinstance(System.String)">
            <summary>
            Copies this ModelInstance to a new ModelInstance
            </summary>
            <param name="modelInstanceName">Identifier of GAMSModelInstance (determined automatically if omitted)</param>
            <returns>Reference to new ModelInstance</returns>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Dispose">
            <summary>
            Free unmanaged ressources.
            </summary>
        </member>
        <member name="P:GAMS.GAMSModelInstance.Checkpoint">
            <summary>
            Retrieve GAMSCheckpoint
            </summary>
        </member>
        <member name="P:GAMS.GAMSModelInstance.Name">
            <summary>
            Retrieve name of GAMSModelInstance
            </summary>
        </member>
        <member name="P:GAMS.GAMSModelInstance.SyncDB">
            <summary>
            Retrieve GAMSDatabase used to synchronize modifiable data
            </summary>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Instantiate(System.String,GAMS.GAMSModifier[])">
            <summary>
            Instantiate the GAMSModelInstance
            </summary>
            <param name="modelDefinition">Model definition</param>
            <param name="modifiers">List of GAMSModifiers</param>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Instantiate(System.String,GAMS.GAMSOptions,GAMS.GAMSModifier[])">
            <summary>
            Instantiate the GAMSModelInstance
            </summary>
            <param name="modelDefinition">Model definition</param>
            <param name="options">GAMS options</param>
            <param name="modifiers">List of GAMSModifiers</param>
        </member>
        <member name="T:GAMS.GAMSModelInstance.SymbolUpdateType">
            <summary>
            Symbol update type
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstance.SymbolUpdateType.Zero">
            <summary>
            If record does not exist use 0 (Zero)
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstance.SymbolUpdateType.BaseCase">
            <summary>
            If record does not exist use values from instantiation
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstance.SymbolUpdateType.Accumulate">
            <summary>
            If record does not exist use value from previous solve
            </summary>
        </member>
        <member name="F:GAMS.GAMSModelInstance.SymbolUpdateType.Inherit">
            <summary>
            Inherit setting from solve statement
            </summary>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Solve(GAMS.GAMSModelInstance.SymbolUpdateType,System.IO.TextWriter,GAMS.GAMSModelInstanceOpt)">
            <summary>
            Solve model instance
            </summary>
            <param name="updateType">Update type</param>
            <param name="output">Stream to capture GAMS log</param>
            <param name="miOpt">GAMSModelInstance options</param>
        </member>
        <member name="M:GAMS.GAMSModelInstance.Interrupt">
            <summary>
            Send interrupt signal to running GAMSModelInstance
            </summary>
        </member>
        <member name="P:GAMS.GAMSModelInstance.ModelStatus">
            <summary>
            Status of the model. (available after a solve)
            </summary>
        </member>
        <member name="P:GAMS.GAMSModelInstance.SolveStatus">
            <summary>
            Solve status of the model. (available after a solve)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions">
            <summary>
            <p>The GAMSOptions class manages GAMS options (sometimes also called GAMS
            parameters since they correspond to the command line parameters of the GAMS
            executable) for a GAMSJob and GAMSModelInstance. There are integer (e.g.
            NodLim), double (e.g. ResLim), and string (e.g. PutDir) valued options. There
            are also a few list options (Defines to set string macros inside GAMS and IDir
            provide multiple search paths for include files) and a power option to set a
            solver for all suitable model types (AllModelTypes).</p>
            <p>Some options known from other interfaces to GAMS that are of limited use or
            could even create problematic situations in the .NET environment are not
            settable through the GAMSOptions class.</p>
            <p>For some options (e.g. Case) other GAMS interfaces use numeric values (e.g. 0,1)
            while the GAMSOptions class has enumerated types with proper names (e.g.
            MixedCase, UpperCase).</p>
            <p>A GAMSOptions instance is connected to external resources and needs to be properly
            disposed before the .NET garbage collector can claim the instance.</p>
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.IDir">
            <summary>
            Input file directories (up to 40 are allowed)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.Defines">
            <summary>
            GAMS Dash Options
            </summary>
        </member>
        <member name="M:GAMS.GAMSOptions.#ctor(GAMS.GAMSWorkspace,GAMS.GAMSOptions,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="workspace">GAMSWorkspace containing GAMSOptions</param>
            <param name="optFrom">GAMSOptions used to initialize the new object</param>
            <param name="optFile">Parameter used to initialize the new objectfile</param>
        </member>
        <member name="M:GAMS.GAMSOptions.Export(System.String)">
            <summary>
            Write GAMSOptions into a parameter file
            </summary>
            <param name="filePath">The path used to write the parameter file.
            A relative path is relative to the GAMS working directory.
            </param>
        </member>
        <member name="M:GAMS.GAMSOptions.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSOptions.Dispose">
            <summary>
            Free unmanaged ressources.
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.GDX">
            <summary>
            Gams data exchange file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Restart">
            <summary>
            Name of a restart file, see \ref UG_SaveRestart
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Input">
            <summary>
            Input file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Output">
            <summary>
            Listing file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Save">
            <summary>
            Creates a work file, see \ref UG_SaveRestart
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Symbol">
            <summary>
            Symbol table file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.XSave">
            <summary>
            Creates a compressed \ref UG_SaveRestart "work file"
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Expand">
            <summary>
            Expanded (include) input file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PageWidth">
            <summary>
            Output file page width
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PageSize">
            <summary>
            Output file page size (=0 no paging)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EPageContr">
            <summary>
            Output file page control option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPageContr.NoPageContrWithPadding">
            <summary>
            No page control, with padding
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPageContr.FortranStyle">
            <summary>
            FORTRAN style line printer format
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPageContr.NoPageContrNoPadding">
            <summary>
            No page control, no padding
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPageContr.FormfeedCharNewPage">
            <summary>
            Formfeed character for new page
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PageContr">
            <summary>
            Output file page control option
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EAction">
            <summary>
            GAMS processing request
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.RestartAfterSolve">
            <summary>
            Restart After Solve
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.CompileOnly">
            <summary>
            CompileOnly
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.ExecuteOnly">
            <summary>
            ExecuteOnly
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.CompileAndExecute">
            <summary>
            Compile and Execute
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.GlueCodeGeneration">
            <summary>
            Glue Code Generation
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAction.TraceReport">
            <summary>
            Trace Report
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Action">
            <summary>
            GAMS processing request
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SubSys">
            <summary>
            Name of subsystem configuration file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ErrNam">
            <summary>
            Name of error message file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScrDir">
            <summary>
            Scratch directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScrNam">
            <summary>
            Work file names stem
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SysDir">
            <summary>
            GAMS system directory where GAMS executables reside
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CurDir">
            <summary>
            Current directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.WorkDir">
            <summary>
            Working directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PutDir">
            <summary>
            Put file directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.GridDir">
            <summary>
            Grid file directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScriptNext">
            <summary>
            Script mailbox file name (GAMSNEXT)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScriptExit">
            <summary>
            Program or script to be executed at the end of a GAMS run
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScriptFrst">
            <summary>
            First line to be written to GAMSNEXT file.
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ELogLine">
            <summary>
            Amount of line tracing to the log file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ELogLine.NoTracing">
            <summary>
            No line tracing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ELogLine.MinimumTracing">
            <summary>
            Minimum line tracing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ELogLine.Automatic">
            <summary>
            Automatic and visually pleasing
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LogLine">
            <summary>
            Amount of line tracing to the log file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LogOption">
            <summary>
            Log option
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LogFile">
            <summary>
            Log file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Trace">
            <summary>
            Trace file name
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EAppendOut">
            <summary>
            Output file append option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAppendOut.Reset">
            <summary>
            Reset listing file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAppendOut.Append">
            <summary>
            Append to listing file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.AppendOut">
            <summary>
            Output file append option
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.AppendLog">
            <summary>
            Log file append option
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EStepSum">
            <summary>
            Summary of computing resources used by job steps
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EStepSum.NoStepSummmary">
            <summary>
            No step summary
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EStepSum.StepSummary">
            <summary>
            Step summary printed
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.StepSum">
            <summary>
            Summary of computing resources used by job steps
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MultiPass">
            <summary>
            Multipass facility
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESuppress">
            <summary>
            Compiler listing option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESuppress.StandardCompilerListing">
            <summary>
            Standard compiler listing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESuppress.SuppressCompilerListing">
            <summary>
            Suppress compiler listing
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Suppress">
            <summary>
            Compiler listing option
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EDFormat">
            <summary>
            Date format
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDFormat.Slash">
            <summary>
            Date as mm/dd/yy
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDFormat.Dot">
            <summary>
            Date as dd.mm.yy
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDFormat.Dash">
            <summary>
            Date as yy-mm-dy
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DFormat">
            <summary>
            Date format
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ETFormat">
            <summary>
            Time format
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETFormat.Colon">
            <summary>
            Time as hh:mm:ss
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETFormat.Dot">
            <summary>
            Time as hh.mm.ss
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.TFormat">
            <summary>
            Time format
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.TabIn">
            <summary>
            Tab spacing
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverCntr">
            <summary>
            Solver control file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverMatr">
            <summary>
            Solver matrix file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverInst">
            <summary>
            Solver instruction file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverStat">
            <summary>
            Solver status file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverSolu">
            <summary>
            Solver solution file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolverDict">
            <summary>
            Solver dictionary file name
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EIntVarUp">
            <summary>
            Set default upper bound on integer variables
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EIntVarUp.INF">
            <summary>
            Set default upper bound for integer variables to +INF
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EIntVarUp.Pass100ToSolver">
            <summary>
            Pass a value of 100 instead of +INF to the solver as upper bound for integer variables
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EIntVarUp.INFandLog">
            <summary>
            Same as 0 but writes a message to the log if the level of an integer variable is greater than 100
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EIntVarUp.Pass100ToSolverAndError">
            <summary>
            Same as 2 but issues an execution error if the level of an integer variable is greater than 100
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IntVarUp">
            <summary>
            Set default upper bound on integer variables
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ECase">
            <summary>
            Output case option for LST file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECase.MixedCase">
            <summary>
            Write listing file in mixed case
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECase.UpperCase">
            <summary>
            Write listing file in upper case only
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Case">
            <summary>
            Output case option for LST file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.G205">
            <summary>
            Use GAMS version 2.05 syntax
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.License">
            <summary>
            Use alternative license file
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EDumpParms">
            <summary>
            GAMS parameter logging
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpParms.No">
            <summary>
            No logging
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpParms.AcceptedParameters">
            <summary>
            Lists accepted/set parameters
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpParms.FileOperationsAcceptedParameters">
            <summary>
            Log of file operations plus list of accepted/set parameters
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DumpParms">
            <summary>
            GAMS parameter logging
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.NoCr">
            <summary>
            Suppress the copyright message
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Profile">
            <summary>
            Execution profiling
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir1">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir2">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir3">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir4">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir5">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir6">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir7">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir8">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir9">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir10">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir11">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir12">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir13">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir14">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir15">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir16">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir17">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir18">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir19">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir20">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir21">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir22">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir23">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir24">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir25">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir26">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir27">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir28">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir29">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir30">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir31">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir32">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir33">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir34">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir35">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir36">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir37">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir38">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir39">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir40">
            <summary>
            Input file directory number N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InputDir">
            <summary>
            Input file directories (searched at compile time)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LibIncDir">
            <summary>
            LibInclude directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SysIncDir">
            <summary>
            SysInclude directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.User1">
            <summary>
            User string N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.User2">
            <summary>
            User string N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.User3">
            <summary>
            User string N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.User4">
            <summary>
            User string N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.User5">
            <summary>
            User string N
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EForceWork">
            <summary>
            Force GAMS to process a save file created with a newer GAMS version or with execution errors
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EForceWork.NoTranslation">
            <summary>
            No translation
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EForceWork.TryTranslation">
            <summary>
            Try translation
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ForceWork">
            <summary>
            Force GAMS to process a save file created with a newer GAMS version or with execution errors
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CErr">
            <summary>
            Compile time error limit
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FErr">
            <summary>
            Alternative error message file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.OptFile">
            <summary>
            Default option file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FSave">
            <summary>
            Creates a forced \ref UG_SaveRestart "work file", i.e., the file is saved even if execution errors or other errors occured
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EDumpOpt">
            <summary>
            Writes preprocessed input to the file input.dmp
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.No">
            <summary>
            No dumpfile
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.RefDataOriginalSetElementNames">
            <summary>
            Extract referenced data from the restart file using original set element names
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.RefDataNewSetElementNames">
            <summary>
            Extract referenced data from the restart file using new set element names
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.RefDataNewSetElementNamesDropSymbolText">
            <summary>
            Extract referenced data from the restart file using new set element names and drop symbol text
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.RefSymbol">
            <summary>
            Extract referenced symbol declarations from the restart file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.Deprecated_10">
            <summary>
            (Same as 11 and therefore hidden)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.InputFileWOComments">
            <summary>
            Write processed input file without comments
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.Deprecated_12">
            <summary>
            (Same as 11 and therefore hidden)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.Deprecated_19">
            <summary>
            (Same as 21 and therefore hidden)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.Deprecated_20">
            <summary>
            (Same as 21 and therefore hidden)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDumpOpt.InputFileWithComments">
            <summary>
            Write processed input file with all comments
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DumpOpt">
            <summary>
            Writes preprocessed input to the file input.dmp
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EErrMsg">
            <summary>
            Placing of compilation error messages
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EErrMsg.EndOfCompilerListing">
            <summary>
            Place error messages at the end of compiler listing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EErrMsg.FollowingError">
            <summary>
            Place error messages immediately following the line with the error
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EErrMsg.Suppress">
            <summary>
            Suppress error messages
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ErrMsg">
            <summary>
            Placing of compilation error messages
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Opt">
            <summary>
            Fold constant $ expressions
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RelPath">
            <summary>
            Processing of relative path
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EStringChk">
            <summary>
            String substitution options
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EStringChk.NoError">
            <summary>
            No substitution if symbol undefined and no error
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EStringChk.Error">
            <summary>
            Error if symbol undefined
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EStringChk.NoErrorRemoveSymbol">
            <summary>
            Remove entire symbol reference if undefined and no error
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.StringChk">
            <summary>
            String substitution options
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Reference">
            <summary>
            Symbol reference file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.OptDir">
            <summary>
            Option file directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MaxExecError">
            <summary>
            Execution time error limit
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ErrorLog">
            <summary>
            Max error message lines written to the log for each error
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LimRow">
            <summary>
            Maximum number of rows listed in one equation block
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LimCol">
            <summary>
            Maximum number of columns listed in one variable block
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ECharSet">
            <summary>
            Character set flag
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECharSet.LimitedGAMSCharSet">
            <summary>
            Use limited GAMS characters set
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECharSet.AnyChar">
            <summary>
            Accept any character in comments and text items (foreign language characters)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CharSet">
            <summary>
            Character set flag
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EKeep">
            <summary>
            Controls keeping or deletion of process directory and scratch files
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EKeep.DeleteProcDir">
            <summary>
            Delete process directory
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EKeep.KeepProcDir">
            <summary>
            Keep process directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Keep">
            <summary>
            Controls keeping or deletion of process directory and scratch files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDE">
            <summary>
            Integrated Development Environment flag
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ETraceOpt">
            <summary>
            Trace file format option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.SolverAndGAMSStepTraceWOHeaders">
            <summary>
            Solver and GAMS step trace
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.SolverAndGAMSStepTrace">
            <summary>
            Solver and GAMS exit trace
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.SolverStepTraceOnly">
            <summary>
            Solver trace only
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.TraceFileFormatGAMSPerformanceWorld">
            <summary>
            Solver trace only in format used for GAMS performance world
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.TraceFileFormatSupportingNLPEC">
            <summary>
            Trace file format supporting NLPEC
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ETraceOpt.TraceFileWithAllAvailableTraceFields">
            <summary>
            Gams exit trace with all available trace fields
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.TraceOpt">
            <summary>
            Trace file format option
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IterLim">
            <summary>
            Iteration limit of solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DomLim">
            <summary>
            Domain violation limit solver default
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ResLim">
            <summary>
            Wall-clock time limit for solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.OptCR">
            <summary>
            Relative Optimality criterion solver default
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.OptCA">
            <summary>
            Absolute Optimality criterion solver default
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESysOut">
            <summary>
            Solver Status file reporting option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESysOut.SuppressAdditionalSolverOutput">
            <summary>
            Suppress additional solver generated output
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESysOut.IncludeAdditionalSolverOutput">
            <summary>
            Include additional solver generated output
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SysOut">
            <summary>
            Solver Status file reporting option
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESolPrint">
            <summary>
            Solution report print option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolPrint.RemoveSolLstFollowingSolves">
            <summary>
            Remove solution listings following solves
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolPrint.IncludeSolLstFollowingSolves">
            <summary>
            Include solution listings following solves
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolPrint.SuppressAllSolInfo">
            <summary>
            Suppress all solution information
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolPrint">
            <summary>
            Solution report print option
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Bratio">
            <summary>
            Basis acceptance threshold
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EHoldFixed">
            <summary>
            Treat fixed variables as constants
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EHoldFixed.FixedVarsNotTreatedAsConstants">
            <summary>
            Fixed variables are not treated as constants
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EHoldFixed.FixedVarsTreatedAsConstants">
            <summary>
            Fixed variables are treated as constants
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.HoldFixed">
            <summary>
            Treat fixed variables as constants
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.NodLim">
            <summary>
            Node limit in branch and bound tree
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.WorkFactor">
            <summary>
            Memory Estimate multiplier for some solvers
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.WorkSpace">
            <summary>
            Work space for some solvers in MB
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ForLim">
            <summary>
            GAMS looping limit
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Seed">
            <summary>
            Random number seed
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EOn115">
            <summary>
            Generate errors for unknown unique element in an equation
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EOn115.NoMessages">
            <summary>
            No error messages
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EOn115.IssueMessages">
            <summary>
            Issue error messages
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.On115">
            <summary>
            Generate errors for unknown unique element in an equation
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EExecMode">
            <summary>
            Limits on external programs that are allowed to be executed
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EExecMode.EverythingAllowed">
            <summary>
            Everything allowed
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EExecMode.InteractiveShellsProhibited">
            <summary>
            Interactive shells in $call and execute commands are prohibited
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EExecMode.CallAndExecuteProhibited">
            <summary>
            Embedded Code and all $call and execute commands are prohibited
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EExecMode.EchoAndPutOnlyToWorkdir">
            <summary>
            $echo or put commands can only write to directories in or below the working or scratchdir
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EExecMode.EchoAndPutProhibited">
            <summary>
            $echo and put commands are not allowed
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ExecMode">
            <summary>
            Limits on external programs that are allowed to be executed
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EInteractiveSolver">
            <summary>
            Allow solver to interact via command line input
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EInteractiveSolver.NoInteraction">
            <summary>
            Interaction with solvelink 0 is not supported
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EInteractiveSolver.AllowInteraction">
            <summary>
            Interaction with solvelink 0 is supported
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InteractiveSolver">
            <summary>
            Allow solver to interact via command line input
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PLicense">
            <summary>
            Privacy license file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.JobTrace">
            <summary>
            Job trace string to be written to the trace file at the end of a GAMS job
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Warnings">
            <summary>
            Number of warnings permitted before a run terminates
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.TraceLevel">
            <summary>
            Modelstat/Solvestat threshold used in conjunction with action=GT
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Timer">
            <summary>
            Instruction timer threshold in milli seconds
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EFileCase">
            <summary>
            Casing of file names and paths (put, gdx, ref, $include, etc.)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFileCase.DefaultCase">
            <summary>
            Causes GAMS to use default casing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFileCase.UpperCase">
            <summary>
            Causes GAMS to upper case file names including path of the file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFileCase.LowerCase">
            <summary>
            Causes GAMS to lower case file names including path of the file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFileCase.UpperCaseFileOnly">
            <summary>
            Causes GAMS to upper case file names only (leave the path alone)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFileCase.LowerCaseFileOnly">
            <summary>
            Causes GAMS to lower case file names only (leave the path alone)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FileCase">
            <summary>
            Casing of file names and paths (put, gdx, ref, $include, etc.)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESavePoint">
            <summary>
            Save solver point in GDX file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESavePoint.NoPointFile">
            <summary>
            No point GDX file is to be saved
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESavePoint.LastSolvePointFile">
            <summary>
            A point GDX file from the last solve is to be saved
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESavePoint.EverySolvePointFile">
            <summary>
            A point GDX file from every solve is to be saved
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESavePoint.LastSolvePointFileScrDir">
            <summary>
            A point GDX file from the last solve is to be saved in the scratch directory
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESavePoint.EverySolvePointFileScrDir">
            <summary>
            A point GDX file from every solve is to be saved in the scratch directory
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SavePoint">
            <summary>
            Save solver point in GDX file
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESolveLink">
            <summary>
            Solver link option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.ChainScript">
            <summary>
            Model instance and entire GAMS state saved to scratch directory, GAMS exits (and vacates memory), and the solver script is called. After the solver terminates, GAMS restarts from the saved state and continues to executing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.CallScript">
            <summary>
            Model instance saved to scratch directory, the solver is called from a shell while GAMS remains open
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.CallModule">
            <summary>
            Model instance saved to scratch directory, the solver is called with a spawn (if possible) or a shell (if spawn is not possible) while GAMS remains open
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.AsyncGrid">
            <summary>
            Model instance saved to scratch directory, the solver starts the solution and GAMS continues in a grid computing environment
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.AsyncSimulate">
            <summary>
            Model instance saved to scratch directory, the solver starts the solution and GAMS waits for the solver to come back but uses same submission process as 3 (test mode)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.LoadLibrary">
            <summary>
            The model instance is passed to the solver in-memory
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.LoadLibraryAsync">
            <summary>
            The model instance is passed to the solver in-memory, the solver starts the solution and GAMS continues in a grid computing environment
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESolveLink.LoadLibraryAsyncSimulate">
            <summary>
            The model instance is passed to the solver in-memory, the solver starts the solution and GAMS waits for the solver to come back but uses same submission process as 6 (test mode)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SolveLink">
            <summary>
            Solver link option
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESys10">
            <summary>
            Changes rpower to ipower when the exponent is constant and within 1e-12 of an integer
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESys10.Disable">
            <summary>
            Disable conversion
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESys10.Enable">
            <summary>
            Enable conversion
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys10">
            <summary>
            Changes rpower to ipower when the exponent is constant and within 1e-12 of an integer
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESys11">
            <summary>
            Dynamic resorting if indices in assignment/data statements are not in natural order
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESys11.AutomaticOptimization">
            <summary>
            Automatic optimization/restructuring of data
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESys11.NoOptimization">
            <summary>
            No optimization
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESys11.AlwaysOptimize">
            <summary>
            Always optimize/restructure
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys11">
            <summary>
            Dynamic resorting if indices in assignment/data statements are not in natural order
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys12">
            <summary>
            Pass model with generation errors to solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ZeroRes">
            <summary>
            The results of certain operations will be set to zero if abs(result) LE ZeroRes
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EZeroResRep">
            <summary>
            Report underflow as a warning when abs(results) LE ZeroRes and result set to zero
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EZeroResRep.NoWarning">
            <summary>
            No warning when a rounding occurs because of ZeroRes
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EZeroResRep.IssueWarning">
            <summary>
            Issue warnings whenever a rounding occurs because of ZeroRes
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ZeroResRep">
            <summary>
            Report underflow as a warning when abs(results) LE ZeroRes and result set to zero
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.HeapLimit">
            <summary>
            Maximum Heap size allowed in MB
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ScrExt">
            <summary>
            Scratch file extension to be used with temporary files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProcDir">
            <summary>
            Process Directory
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EgdxCompress">
            <summary>
            Compression of generated GDX file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxCompress.DoNotCompressGDX">
            <summary>
            Do not compress GDX files
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxCompress.CompressGDX">
            <summary>
            Compress GDX files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.gdxCompress">
            <summary>
            Compression of generated GDX file
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EgdxConvert">
            <summary>
            Version of GDX files generated (for backward compatibility)
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxConvert.Version5">
            <summary>
            Version 5 GDX file, does not support compression
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxConvert.Version6">
            <summary>
            Version 6 GDX file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxConvert.Version7">
            <summary>
            Version 7 GDX file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.gdxConvert">
            <summary>
            Version of GDX files generated (for backward compatibility)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EAppendExpand">
            <summary>
            Expand file append option
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAppendExpand.Reset">
            <summary>
            Reset expand file
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAppendExpand.Append">
            <summary>
            Append to expand file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.AppendExpand">
            <summary>
            Expand file append option
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ETLim">
            <summary>
            Elapsed time limit in seconds
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProfileTol">
            <summary>
            Minimum time a statement must use to appear in profile generated output
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProfileFile">
            <summary>
            Write profile information to this file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MaxProcDir">
            <summary>
            Maximum number of 225* process directories
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Integer1">
            <summary>
            Integer communication cell N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Integer2">
            <summary>
            Integer communication cell N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Integer3">
            <summary>
            Integer communication cell N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Integer4">
            <summary>
            Integer communication cell N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Integer5">
            <summary>
            Integer communication cell N
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.GridScript">
            <summary>
            Grid submission script
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Threads">
            <summary>
            Number of threads to be used by a solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.UseDLL">
            <summary>
            Use Cmex library instead of executable
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Debug">
            <summary>
            Run GAMS in debugging mode
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PID2Error">
            <summary>
            Send GAMS pid to standard error stream
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ENoNewVarEqu">
            <summary>
            Triggers a compilation error when new equations or variable symbols are introduced
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ENoNewVarEqu.AllowNewVarEqu">
            <summary>
            AllowNewVarEqu
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ENoNewVarEqu.DoNotAllowNewVarEqu">
            <summary>
            DoNotAllowNewVarEqu
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.NoNewVarEqu">
            <summary>
            Triggers a compilation error when new equations or variable symbols are introduced
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ForceOptFile">
            <summary>
            Overwrites other option file section mechanism
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SymPrefix">
            <summary>
            Prefix all symbols encountered during compilation by the specified string in work file
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ServerRun">
            <summary>
            Run on a server with redirected log (experimental)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EgdxUels">
            <summary>
            Unload labels or UELs to GDX either squeezed or full
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxUels.squeezed">
            <summary>
            Write only the UELs to Universe, that are used by the exported symbols
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EgdxUels.full">
            <summary>
            Write all UELs to Universe
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.gdxUels">
            <summary>
            Unload labels or UELs to GDX either squeezed or full
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DumpParmsLogPrefix">
            <summary>
            Prefix of lines triggered by DumpParms>1
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EstrictSingleton">
            <summary>
            Error if assignment to singleton set has multiple elements
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EstrictSingleton.FirstRecord">
            <summary>
            Take first record if assignment to singleton set has multiple elements
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EstrictSingleton.Error">
            <summary>
            Error if assignment to singleton set has multiple elements
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.strictSingleton">
            <summary>
            Error if assignment to singleton set has multiple elements
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SaveObfuscate">
            <summary>
            Creates an obfuscated work file, see \ref UG_SecureWorkFiles_ObfuscatedWorkFiles
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.XSaveObfuscate">
            <summary>
            Creates a compressed \ref UG_SecureWorkFiles_ObfuscatedWorkFiles "obfuscated work file"
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RestartNamed">
            <summary>
            Name of another matching restart file, see \ref UG_SecureWorkFiles_ObfuscatedWorkFiles
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys14">
            <summary>
            Write workfile without timing information
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FDDelta">
            <summary>
            Step size for finite differences
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EFDOpt">
            <summary>
            Options for finite differences
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GHAnalyticHNumericGradScale">
            <summary>
            All derivatives analytically, for numerical Hessian use gradient values, scale delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GHAnalyticHNumericFuncScale">
            <summary>
            All derivatives analytically, for numerical Hessian use function values, scale delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GAnalyticFHNumericGradScale">
            <summary>
            Gradient analytically, force Hessian numerically using gradient values, scale delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GAnalyticFHNumericFuncScale">
            <summary>
            Gradient analytically, force Hessian numerically using function values, scale delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.FGHNumericScale">
            <summary>
            Force gradient and Hessian numerically, scale delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GHAnalyticHNumericGradNoScale">
            <summary>
            Same as 0, but no scale of delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GHAnalyticHNumericFuncNoScale">
            <summary>
            Same as 1, but no scale of delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GAnalyticFHNumericGradNoScale">
            <summary>
            Same as 2, but no scale of delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.GAnalyticFHNumericFuncNoScale">
            <summary>
            Same as 3, but no scale of delta
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFDOpt.FGHNumericNoScale">
            <summary>
            Same as 4, but no scale of delta
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FDOpt">
            <summary>
            Options for finite differences
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Solver">
            <summary>
            Default solver for all model types that the solver is capable to process
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DocFile">
            <summary>
            Filename stem for documentation files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SparseRun">
            <summary>
            Switch between sparse and dense execution
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys15">
            <summary>
            Automatic switching of data structures used in search records
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys16">
            <summary>
            Disable search record memory (aka execute this as pre-GAMS 24.5)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys17">
            <summary>
            Disable sparsity trees growing with permutation (aka execute this as pre-GAMS 24.5)
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EPrefixLoadPath">
            <summary>
            Prepend GAMS system directory to library load path
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPrefixLoadPath.Off">
            <summary>
            Do not set GAMS system directory at beginning of library load path
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPrefixLoadPath.On">
            <summary>
            Set GAMS system directory at beginning of library load path
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PrefixLoadPath">
            <summary>
            Prepend GAMS system directory to library load path
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ThreadsAsync">
            <summary>
            Limit on number of threads to be used for asynchronous solves (solveLink=6)
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MCPRHoldfx">
            <summary>
            Print list of rows that are perpendicular to variables removed due to the holdfixed setting
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EAsyncSolLst">
            <summary>
            Print solution listing when asynchronous solve (Grid or Threads) is used
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAsyncSolLst.Off">
            <summary>
            Do not print solution listing into lst file for asynchronous solves
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EAsyncSolLst.On">
            <summary>
            Print solution listing into lst file for asynchronous solves
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.AsyncSolLst">
            <summary>
            Print solution listing when asynchronous solve (Grid or Threads) is used
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FileStem">
            <summary>
            Sets the file stem for output files which use the input file name as stem by default
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProcDirPath">
            <summary>
            Directory to create process directory in
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EPyMultInst">
            <summary>
            GAMS/Python Multiple Instance Interpreter
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPyMultInst.Single">
            <summary>
            Use a single-session Python interpreter
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPyMultInst.Multi">
            <summary>
            Use a multi-session Python interpreter
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PyMultInst">
            <summary>
            GAMS/Python Multiple Instance Interpreter
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FileStemApFromEnv">
            <summary>
            Append a string read from an environment variable to the "FileStem"
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EShowOSMemory">
            <summary>
            Show the memory usage reported by the Operating System instead of the internal counting
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EShowOSMemory.InternalAccounting">
            <summary>
            Show memory by internal accounting
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EShowOSMemory.RSS">
            <summary>
            Show resident set size reported by operating system
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EShowOSMemory.VSS">
            <summary>
            Show virtual set size reported by operating system
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ShowOSMemory">
            <summary>
            Show the memory usage reported by the Operating System instead of the internal counting
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ELstTitleLeftAligned">
            <summary>
            Write title of LST file all left aligned
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ELstTitleLeftAligned.Off">
            <summary>
            Split LST title into left and right aligned part
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ELstTitleLeftAligned.On">
            <summary>
            Write LST title completely left aligned
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LstTitleLeftAligned">
            <summary>
            Write title of LST file all left aligned
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EFreeEmbeddedPython">
            <summary>
            Free external resources at the end of each embedded Python code blocks
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFreeEmbeddedPython.Off">
            <summary>
            Keep resources to reuse them potentially
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFreeEmbeddedPython.On">
            <summary>
            Free resources
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.FreeEmbeddedPython">
            <summary>
            Free external resources at the end of each embedded Python code blocks
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ECaptureModelInstance">
            <summary>
            Switch to capture all model instances within a run
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECaptureModelInstance.Off">
            <summary>
            Do not capture model instances
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECaptureModelInstance.On">
            <summary>
            Capture model instances
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CaptureModelInstance">
            <summary>
            Switch to capture all model instances within a run
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCJSON">
            <summary>
            Specify JSON file name to verify data contract
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGenerateJSON">
            <summary>
            Specify JSON file name of data contract
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGenerateGDX">
            <summary>
            Specify GDX file name of input and output side of data contract
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGenerateGDXInput">
            <summary>
            Specify GDX file name of input side of data contract
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGenerateGDXOutput">
            <summary>
            Specify GDX file name of output side of data contract
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGDXInput">
            <summary>
            GDX file name with data for implicit input
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCGDXOutput">
            <summary>
            GDX file name for data for implicit output
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ECheckErrorLevel">
            <summary>
            Check errorLevel automatically after executing external program
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECheckErrorLevel.Off">
            <summary>
            Do not check errorLevel automatically after execution of external program
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ECheckErrorLevel.On">
            <summary>
            Check errorLevel automatically after execution of external program
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CheckErrorLevel">
            <summary>
            Check errorLevel automatically after executing external program
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.IDCProtect">
            <summary>
            Flag to control assignment protection of external input symbols
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.EncryptKey">
            <summary>
            Key to encrypt a text file using $encrypt
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DecryptKey">
            <summary>
            Key to decrypt a text file that was encrypted via $encrypt
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Sys18">
            <summary>
            Use backward compatible (i.e. pre-GAMS 31) scheme for reading floating-point numbers
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.ESuffixDLVars">
            <summary>
            Switch default for "$on/offSuffixDLVars"
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESuffixDLVars.OffSuffixDLVars">
            <summary>
            Activate $offSuffixDLVars
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.ESuffixDLVars.OnSuffixDLVars">
            <summary>
            Activate $onSuffixDLVars
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SuffixDLVars">
            <summary>
            Switch default for "$on/offSuffixDLVars"
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EDigit">
            <summary>
            Switch default for "$on/offDigit"
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDigit.OffDigit">
            <summary>
            Activate $offDigit
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EDigit.OnDigit">
            <summary>
            Activate $onDigit
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Digit">
            <summary>
            Switch default for "$on/offDigit"
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EEmpty">
            <summary>
            Switch default for "$on/offEmpty"
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EEmpty.OffEmpty">
            <summary>
            Activate $offEmpty
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EEmpty.OnEmpty">
            <summary>
            Activate $onEmpty
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Empty">
            <summary>
            Switch default for "$on/offEmpty"
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.EolCom">
            <summary>
            Switch default for "$on/offEolCom" and "$eolCom"
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EFiltered">
            <summary>
            Switch default for "$on/offFiltered"
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFiltered.OffFiltered">
            <summary>
            Activate $offFiltered
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EFiltered.OnFiltered">
            <summary>
            Activate $onFiltered
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Filtered">
            <summary>
            Switch default for "$on/offFiltered"
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.InlineCom">
            <summary>
            Switch default for "$on/offInline" and "$inlineCom"
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EListing">
            <summary>
            Switch default for "$on/offListing"
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EListing.OffListing">
            <summary>
            Activate $offListing
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EListing.OnListing">
            <summary>
            Activate $onListing
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.Listing">
            <summary>
            Switch default for "$on/offListing"
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PutND">
            <summary>
            Number of decimals for put files
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EPutNR">
            <summary>
            Numeric round format for put files
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPutNR.ForE">
            <summary>
            Item is displayed in F or E format
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPutNR.Rounded">
            <summary>
            Item is rounded to fit fields
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPutNR.Scientific">
            <summary>
            Item is displayed in scientific notation
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PutNR">
            <summary>
            Numeric round format for put files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PutPS">
            <summary>
            Page size for put files
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PutPW">
            <summary>
            Page width for put files
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EPreviousWork">
            <summary>
            Indicator for writing workfile with previous workfile version
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPreviousWork.Off">
            <summary>
            Write workfile using the current version
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EPreviousWork.On">
            <summary>
            Write workfile using the previous workfile version
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.PreviousWork">
            <summary>
            Indicator for writing workfile with previous workfile version
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.SqaCmex">
            <summary>
            Compare model runs of a trusted GAMS version against runs with a development version
            </summary>
        </member>
        <member name="T:GAMS.GAMSOptions.EProcTreeMemMonitor">
            <summary>
            Monitor the memory used by the GAMS process tree
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EProcTreeMemMonitor.Off">
            <summary>
            Do not monitor memory usage for the GAMS process tree
            </summary>
        </member>
        <member name="F:GAMS.GAMSOptions.EProcTreeMemMonitor.On">
            <summary>
            Start a thread to monitor memory usage for the GAMS process tree
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProcTreeMemMonitor">
            <summary>
            Monitor the memory used by the GAMS process tree
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.ProcTreeMemTicks">
            <summary>
            Set wait interval between memory monitor checks: ticks = milliseconds
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.LP">
            <summary>
            Default LP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MIP">
            <summary>
            Default MIP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RMIP">
            <summary>
            Default RMIP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.NLP">
            <summary>
            Default NLP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MCP">
            <summary>
            Default MCP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MPEC">
            <summary>
            Default MPEC solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RMPEC">
            <summary>
            Default RMPEC solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.CNS">
            <summary>
            Default CNS solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.DNLP">
            <summary>
            Default DNLP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RMINLP">
            <summary>
            Default RMINLP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MINLP">
            <summary>
            Default MINLP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.QCP">
            <summary>
            Default QCP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.MIQCP">
            <summary>
            Default MIQCP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.RMIQCP">
            <summary>
            Default RMIQCP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.EMP">
            <summary>
            Default EMP solver
            </summary>
        </member>
        <member name="P:GAMS.GAMSOptions.AllModelTypes">
            <summary>
            Set default solver for all model types which the solver can handle
            </summary>
        </member>
        <member name="M:GAMS.GAMSOptions.ResetToDefault">
            <summary>
            Reset all GAMS options to default
            </summary>
        </member>
        <member name="T:GAMS.GAMSParameter">
            <summary>
            This is the representation of a parameter symbol in GAMS. It exists in a
            GAMSDatabase and contains GAMSParameterRecords which one can iterate through.
            </summary>
        </member>
        <member name="M:GAMS.GAMSParameter.#ctor(GAMS.GAMSDatabase,System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="identifier">Parameter name</param>
            <param name="dimension">Parameter dimension</param>
            <param name="explanatoryText">Explanatory text to parameter</param>
            <param name="domains">Parameter domains</param>
        </member>
        <member name="M:GAMS.GAMSParameter.AddRecord(System.String[])">
            <summary>
            Add record to GAMSParameter
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.FindRecord(System.String[])">
            <summary>
            Find record in GAMSParameter
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.MergeRecord(System.String[])">
            <summary>
             Finds record in GAMSParameter if it exists, adds it if not
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.FirstRecord">
            <summary>
            Retrieve first record in GAMSParameter
            </summary>
            <returns>Refernce to record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.FirstRecord(System.String[])">
            <summary>
            Retrieve a slice of the first record in GAMSParameter
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.LastRecord">
            <summary>
            Retrieve last record in GAMSParameter
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSParameter.LastRecord(System.String[])">
            <summary>
            Retrieve a slice of the last record in GAMSParameter
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="T:GAMS.GAMSParameterRecord">
            <summary>
            This is the representation of a single record of a GAMSParameter.
            </summary>
        </member>
        <member name="P:GAMS.GAMSParameterRecord.Parameter">
            <summary>
            Return parameter where this record belongs to
            </summary>
        </member>
        <member name="M:GAMS.GAMSParameterRecord.#ctor(GAMS.GAMSParameterRecord)">
            <summary>
            Constructor
            </summary>
            <param name="record">GAMSParameterRecord to initialize this instance from</param>
        </member>
        <member name="P:GAMS.GAMSParameterRecord.Value">
            <summary>
            Get: Retrieve the value of this GAMSParameterRecord
            Set: Set the value of this GAMSParameterRecord
            </summary>
        </member>
        <member name="T:GAMS.GAMSCheckpoint">
            <summary>
            A GAMSCheckpoint class captures the state of a GAMSJob after the GAMSJob.Run 
            method has been carried out. Another GAMSJob can continue (or restart) from a 
            GAMSCheckpoint. A GAMSCheckpoint constructed with a file name will create a file 
            (extension .g00) for permanent storage when supplied as parameter on the 
            GAMSJob.Run method. Moreover, a GAMSModelInstance is also initialized from a 
            checkpoint that contains the model definition of the model instance.
            </summary>
        </member>
        <member name="M:GAMS.GAMSCheckpoint.#ctor(GAMS.GAMSWorkspace,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="workspace">GAMSWorkspace containing GAMSCheckpoint</param>
            <param name="checkpointName">Identifier of GAMSCheckpoint (determined automatically if omitted or set to empty string)</param>
        </member>
        <member name="M:GAMS.GAMSCheckpoint.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:GAMS.GAMSCheckpoint.WorkSpace">
            <summary>
            Get the GAMSWorkspace
            </summary>
        </member>
        <member name="P:GAMS.GAMSCheckpoint.FileName">
            <summary>
            Get the checkpoint file name
            </summary>
        </member>
        <member name="P:GAMS.GAMSCheckpoint.Name">
            <summary>
            Get the checkpoint name
            </summary>
        </member>
        <member name="M:GAMS.GAMSCheckpoint.AddModelInstance(System.String)">
            <summary>
            Create model instance
            </summary>
            <param name="modelInstanceName">Identifier of GAMSModelInstance (determined automatically if omitted)</param>
            <returns>Reference to GAMSModelInstance</returns>
        </member>
        <member name="T:GAMS.GAMSSet">
            <summary>
            This is the representation of a set symbol in GAMS. It exists in a
            GAMSDatabase and contains GAMSSetRecords which one can iterate through.
            </summary>
        </member>
        <member name="M:GAMS.GAMSSet.#ctor(GAMS.GAMSDatabase,System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="identifier">Set name</param>
            <param name="dimension">Set dimension</param>
            <param name="explanatoryText">Explanatory text to set</param>
            <param name="domains">Parameter domains</param>
        </member>
        <member name="M:GAMS.GAMSSet.AddRecord(System.String[])">
            <summary>
            Add record to GAMSSet
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.FindRecord(System.String[])">
            <summary>
            Find record in GAMSSet
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.MergeRecord(System.String[])">
            <summary>
             Finds record in GAMSSet if it exists, adds it if not
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.FirstRecord">
            <summary>
            Retrieve first record in GAMSSet
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.FirstRecord(System.String[])">
            <summary>
            Retrieve a slice of the first record in GAMSSet
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.LastRecord">
            <summary>
            Retrieve last record in GAMSSet
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSet.LastRecord(System.String[])">
            <summary>
            Retrieve a slice of the last record of GAMSSet
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="T:GAMS.GAMSSetRecord">
            <summary>
            This is the representation of a single record of a GAMSSet.
            </summary>
        </member>
        <member name="P:GAMS.GAMSSetRecord.Set">
            <summary>
            Return set where this record belongs to
            </summary>
        </member>
        <member name="M:GAMS.GAMSSetRecord.#ctor(GAMS.GAMSSetRecord)">
            <summary>
            Constructor
            </summary>
            <param name="record">GAMSSetRecord to initialize this instance from</param>
        </member>
        <member name="P:GAMS.GAMSSetRecord.Text">
            <summary>
            Get: Retrieve the explanatory text of this GAMSSetRecord
            Set: Set the explanatory text of this GAMSSetRecord
            </summary>
        </member>
        <member name="T:GAMS.GAMSSymbolDomainViolation">
            <summary>
            This class describes a domain violation of a GAMSSymbol.
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbolDomainViolation.ViolRec">
            <summary>
            GAMSSymbolRecord that has a domain violation
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbolDomainViolation.ViolInd">
            <summary>
            Array indicating which position of a record has a domain violation
            </summary>
        </member>
        <member name="T:GAMS.GAMSSymbol">
            <summary>
            This is the representation of a symbol in GAMS. It exists in a
            GAMSDatabase and contains GAMSSymbolRecords which one can iterate through.
            Derived classes are GAMSEquation, GAMSParameter, GAMSSet and GAMSVariable.
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.GAMSDatabase">
            <summary>
            Get GAMSDatabase containing GAMSSymbol
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.Name">
            <summary>
            Get GAMSSymbol name
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.Dim">
            <summary>
            Get GAMSSymbol dimension
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.Text">
            <summary>
            Get explanatory text of GAMSSymbol
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.NumberRecords">
            <summary>
            Retrieve the number of records of the GAMSSymbol
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbol.#ctor(GAMS.GAMSDatabase,System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="symPtr">Symbol Pointer</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.#ctor(GAMS.GAMSDatabase,System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="identifier">Symbol name</param>
            <param name="dimension">Symbol dimension</param>
            <param name="explanatoryText">Explanatory text to symbol</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbol.DeleteRecord(System.String[])">
            <summary>
            Delete GAMSSymbol record
            </summary>
            <param name="keys">List of keys</param>
            <returns>True if everything worked, else (record does not exist) false</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.Clear">
            <summary>
            Clear symbol
            </summary>
            <returns>True if everything worked, else false</returns>
        </member>
        <member name="P:GAMS.GAMSSymbol.Domains">
            <summary>
            Domains of Symbol, each element is either a GAMSSet (real domain) or a string (relaxed domain)
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbol.DomainsAsStrings">
            <summary>
            Domains of Symbol, each element is a string
            Note: If the domain is an alias in GAMS, this call will return the name of 
            the Alias, not the name of the aliased Set
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbol.CheckDomains">
            <summary>
            Check if all records are within the specified domain of the symbol
            </summary>
            <returns>True: Everything is correct, False: There is a domain violation</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.GetSymbolDVs(System.Int32)">
            <summary>
            Return all GAMSSymbolDomainViolations
            </summary>
            <param name="MaxViol">The maximum number of domain violations which should be stored (0 for no limit)</param>
            <returns>List of GAMSSymbolDomainViolations</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.AddRecord(System.String[])">
            <summary>
            Add record to GAMSSymbol
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.FindRecord(System.String[])">
            <summary>
            Find record in GAMSSymbol
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.MergeRecord(System.String[])">
            <summary>
            Finds record in GAMSSymbol if it exists, adds it if not
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found or added record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.FirstRecord">
            <summary>
            Retrieve first record in GAMSSymbol
            </summary>
            <example>
            <code>
            try
            {
                Console.WriteLine("Transportation costs");
                GAMSParameterRecord x = job.OutDB.GetParameter("c").FirstRecord();
                do
                {
                    Console.WriteLine(x.Keys[0] + "." + x.Keys[1] + ":" + x.Value);
                } while (x.MoveNext());
            }
            catch
            {
                Console.WriteLine("No records found");
            }
            </code>
            </example>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.FirstRecord(System.String[])">
            <summary>
            Retrieve the first record in GAMSSymbol that meets the slice criteria.
            </summary>
            <example>
            <code>
            try
            {
                Console.WriteLine("Transportation costs from Seattle");
                GAMSParameterRecord x = job.OutDB.GetParameter("c").FirstRecord("seattle", " ");
                do
                {
                    Console.WriteLine(x.Keys[1] + ":" + x.Value);
                } while (x.MoveNext());
            }
            catch
            {
                Console.WriteLine("No records found");
            }
            </code>
            </example>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Refreence to record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.LastRecord">
            <summary>
            Retrieve last record in GAMSSymbol
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.LastRecord(System.String[])">
            <summary>
            Retrieve a slice of the last record in GAMSSymbol
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopySymbol(GAMS.GAMSSymbol)">
            <summary>
            Copys all records of this GAMSSymbol to target GAMSSymbol (if target had records, they will be deleted)
            </summary>
            <param name="target">Target GAMSSymbol</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopyToArray(System.Object,System.Int32)">
            <summary>
            Copies values of a dense symbol into a dense array
            If the symbol is a set, the position of each record within the set is stored (1-based).
            If the symbol is a parameter the value is stored.
            If the symbol is an equation or a variable the parameter field determines what is stored
            </summary>
            <param name="cube">Array to store data in, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="field">Defines the field to store for Equation or Variable</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopyToSqzdArray(System.Object,System.Int32,System.Tuple{GAMS.GAMSSet,GAMS.GAMSSet}[])">
            <summary>
            Copies values of a sparse symbol into a squeezed array
            If the symbol is a set, the position of each record within the set is stored (1-based).
            If the symbol is a parameter the value is stored.
            If the symbol is an equation or a variable the parameter field determines what is stored
            </summary>
            <param name="cube">Array to store data in, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="field">Defines the field to store for Equation or Variable</param>
            <param name="domains">First item in tuple is the domain of the sqeezed array, second item is the domain of the source symbol (one tuple per dimension)</param>
            <returns>Number of dropped records</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopyToSqzdArray(System.Object,System.Tuple{GAMS.GAMSSet,GAMS.GAMSSet}[])">
            <summary>
            Copies values of a sparse symbol into a squeezed array
            If the symbol is a set, the position of each record within the set is stored (1-based).
            If the symbol is a parameter the value is stored.
            If the symbol is an equation or a variable the level is stored.
            </summary>
            <param name="cube">Array to store data in, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="domains">First item in tuple is the domain of the sqeezed array, second item is the domain of the source symbol (one tuple per dimension)</param>
            <returns>Number of dropped records</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopySparseToDenseArray(System.Object,System.Int32,GAMS.GAMSSet[])">
            <summary>
            Copies values of a sparse symbol into a dense array
            If the symbol is a set, the position of each record within the set is stored (1-based).
            If the symbol is a parameter the value is stored.
            If the symbol is an equation or a variable the parameter field determines what is stored
            </summary>
            <param name="cube">Array to store data in, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="field">Defines the field to store for Equation or Variable</param>
            <param name="domains">Domains of the source symbol (one GAMSSet per dimension)</param>
            <returns>Number of dropped records</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopySparseToDenseArray(System.Object,GAMS.GAMSSet[])">
            <summary>
            Copies values of a sparse symbol into a squeezed array
            If the symbol is a set, the position of each record within the set is stored (1-based).
            If the symbol is a parameter the value is stored.
            If the symbol is an equation or a variable the level is stored.
            </summary>
            <param name="cube">Array to store data in, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="domains">Domains of the source symbol (one GAMSSet per dimension)</param>
            <returns>Number of dropped records</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopyFromDenseArray(System.Object,GAMS.GAMSSet[])">
            <summary>
            Copies values from dense array into a symbol
            If the symbol is a set, the defined records are added.
            If the symbol is a parameter, the defined records are added and the values are set.
            If the symbol is an equation or a variable, the defined records are added and the levels are set.111
            </summary>
            <param name="cube">Array containing the data, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="domains">Domains of the symbol (one GAMSSet per dimension)</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.CopySliceFromDenseArray(System.Object,System.Tuple{GAMS.GAMSSet,GAMS.GAMSSet}[])">
            <summary>
            Copies values from slice of dense array into a symbol
            If the symbol is a set, the defined records are added.
            If the symbol is a parameter, the defined records are added and the values are set.
            If the symbol is an equation or a variable, the defined records are added and the levels are set.111
            </summary>
            <param name="cube">Array containing the data, dimension must be equal to dimension of symbol, for a GAMSSet, it must be an int array, for the other symbol types it must be a double array</param>
            <param name="domains">First item in tuple is the domain of the slice to store, second item is the domain of the source symbol (one tuple per dimension)</param>
        </member>
        <member name="M:GAMS.GAMSSymbol.Equals(System.Object)">
            <summary>
            Indicates whether another object is "equal to" this one. 
            This is the case if they hold the same Symbol Pointer (aka the same internal reference).
            </summary>
            <param name="obj">The reference object with which to compare</param>
            <returns>True if this object is the same as the obj argument; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.GetHashCode">
            <summary>
            Calculates a Hash Code based on the Sympol Pointer (aka the internal reference).
            </summary>
            <returns>A Hash Code based on the Sympol Pointer (aka the internal reference)</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.op_Equality(GAMS.GAMSSymbol,GAMS.GAMSSymbol)">
            <summary>
            Indicate whether two GAMSSybols are equal to each other.
            This is the case if they hold the same Symbol Pointer (aka the same internal reference).
            </summary>
            <param name="lhs">First GAMSSybol to be compared.</param>
            <param name="rhs">Second GAMSSybol to be compared.</param>
            <returns>True if both GAMSSymbols are the same; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.op_Inequality(GAMS.GAMSSymbol,GAMS.GAMSSymbol)">
            <summary>
            Indicate whether two GAMSSybols are not equal to each other.
            This is the case if they hold different Symbol Pointer (aka different internal references).
            </summary>
            <param name="lhs">First GAMSSybol to be compared.</param>
            <param name="rhs">Second GAMSSybol to be compared.</param>
            <returns>True if both GAMSSymbols are different; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.Equals(GAMS.GAMSSymbol)">
            <summary>
            Indicates whether another GAMSSymbol is "equal to" this one. 
            This is the case if they hold the same Symbol Pointer (aka the same internal reference).
            </summary>
            <param name="s">The reference GAMSSymbol with which to compare</param>
            <returns>True if this GAMSSymbol is the same as the s argument; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbol.GetEnumerator">
            <summary>
            Retrieve an enumerator for this symbol.
            </summary>
            <returns>Instance of GAMSSymbolEnumerator.</returns>
        </member>
        <member name="T:GAMS.GAMSSymbolEnumerator">
            <summary>
            Enumerator for iterating through the records of a specific symbol.
            This class can be used with all GAMS symbol types.
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbolEnumerator.#ctor(GAMS.GAMSSymbol)">
            <summary>
            Constructor
            </summary>
            <param name="symbol">The symbol that is bound to this Enumerator</param>
        </member>
        <member name="M:GAMS.GAMSSymbolEnumerator.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbolEnumerator.Current">
            <summary>
            Retrieve the current symbol
            </summary>
            <returns>
            The current symbol record. This is an instance of a subclass of GAMSSymbolRecord, namely either GAMSVariableRecord,
            GAMSEquationRecord, GAMSVariableRecord or GAMSSetRecord.
            </returns>
        </member>
        <member name="M:GAMS.GAMSSymbolEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next record.
            </summary>
            <returns>True if the operation is possible, false otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolEnumerator.Reset">
            <summary>
            Reset the enumerator to its initial state.
            </summary>
        </member>
        <member name="T:GAMS.GAMSSymbolRecord">
            <summary>
            This is the representation of a single record of a GAMSSymbol.
            Derived classes are GAMSEquationRecord, GAMSParameterRecord, GAMSSetRecord and GAMSVariableRecord
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.#ctor(GAMS.GAMSSymbolRecord)">
            <summary>
            Constructor
            </summary>
            <param name="rec">GAMSSymbolRecord to initialize this instance from</param>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbolRecord.Symbol">
            <summary>
            Retrieve the GAMSSymbol that contains this record
            </summary>
        </member>
        <member name="P:GAMS.GAMSSymbolRecord.Keys">
            <summary>
            Retrieve keys of GAMSSymbolRecord
            </summary>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.Key(System.Int32)">
            <summary>
            Retrieve key of GAMSSymbolRecord on position index
            </summary>
            <param name="index">Index position of key to be returned</param>
            <returns>Key at position index</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.MoveNext">
            <summary>
            Iterate to next GAMSSymbolRecord of GAMSSymbol
            </summary>
            <returns>True if everything worked, false otherwise</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.MovePrevious">
            <summary>
            Iterate to previous GAMSSymbolRecord of GAMSSymbol
            </summary>
            <returns>True if everything worked, false otherwise</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.Equals(System.Object)">
            <summary>
            Indicates whether another object is "equal to" this one. 
            This is the case if they hold the internal reference is the same.
            </summary>
            <param name="obj">The reference object with which to compare</param>
            <returns>True if this object is the same as the obj argument; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.GetHashCode">
            <summary>
            Calculates a Hash Code based on the Sympol Iteration Pointer (aka the internal reference).
            </summary>
            <returns>A Hash Code based on the Sympol IterationPointer (aka the internal reference)</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.op_Equality(GAMS.GAMSSymbolRecord,GAMS.GAMSSymbolRecord)">
            <summary>
            Indicate whether two GAMSSymbolRecords are equal to each other.
            This is the case if they hold the internal reference is the same.
            </summary>
            <param name="lhs">First GAMSSymbolRecord to be compared.</param>
            <param name="rhs">Second GAMSSymbolRecord to be compared.</param>
            <returns>True if both GAMSSymbolRecords are the same; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.op_Inequality(GAMS.GAMSSymbolRecord,GAMS.GAMSSymbolRecord)">
            <summary>
            Indicate whether two GAMSSymbolRecords are not equal to each other.
            This is the case if they hold different internal references.
            </summary>
            <param name="lhs">First GAMSSymbolRecord to be compared.</param>
            <param name="rhs">Second GAMSSymbolRecord to be compared.</param>
            <returns>True if both GAMSSymbolRecords are different; False otherwise.</returns>
        </member>
        <member name="M:GAMS.GAMSSymbolRecord.Equals(GAMS.GAMSSymbolRecord)">
            <summary>
            Indicates whether another GAMSSymbolRecord is "equal to" this one. 
            This is the case if they hold the same internal reference.
            </summary>
            <param name="r">The reference GAMSSymbolRecord with which to compare</param>
            <returns>True if this GAMSSymbolRecord is the same as the r argument; False otherwise.</returns>
        </member>
        <member name="T:GAMS.GAMSVariable">
            <summary>
            This is the representation of a variable symbol in GAMS. It exists in a
            GAMSDatabase and contains GAMSVariableRecords which one can iterate through.
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariable.VarType">
            <summary>
            Retrieve subtype of variable (Binary, Integer, Positive, Negative, Free, SOS1, SOS2, SemiCont, SemiInt,)
            </summary>
        </member>
        <member name="M:GAMS.GAMSVariable.#ctor(GAMS.GAMSDatabase,System.String,System.Int32,GAMS.VarType,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="database">Corresponding GAMSDatabase</param>
            <param name="identifier">Variable name</param>
            <param name="dimension">Variable dimension</param>
            <param name="varType">Variable subtype (Binary, Integer, Positive, Negative, Free, SOS1, SOS2, SemiCont, SemiInt,)</param>
            <param name="explanatoryText">Explanatory text to variable</param>
            <param name="domains">Parameter domains</param>
        </member>
        <member name="M:GAMS.GAMSVariable.AddRecord(System.String[])">
            <summary>
            Add record to GAMSVariable
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.FindRecord(System.String[])">
            <summary>
            Find record in GAMSVariable
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to found record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.MergeRecord(System.String[])">
            <summary>
             Finds record in GAMSVariable if it exists, adds it if not
            </summary>
            <param name="keys">List of keys</param>
            <returns>Reference to added record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.FirstRecord">
            <summary>
            Retrieve first record in GAMSVariable
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.FirstRecord(System.String[])">
            <summary>
            Retrieve a slice of the first record in GAMSVariable
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.LastRecord">
            <summary>
            Retrieve last record in GAMSVariable
            </summary>
            <returns>Reference to record</returns>
        </member>
        <member name="M:GAMS.GAMSVariable.LastRecord(System.String[])">
            <summary>
            Retrieve a slice of the last record in GAMSVariable
            </summary>
            <param name="slice">Define filter for elements whose record should be retrieved</param>
            <returns>Reference to record</returns>
        </member>
        <member name="T:GAMS.GAMSVariableRecord">
            <summary>
            This is the representation of a single record of a GAMSVariable.
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Variable">
            <summary>
            Return variable where this record belongs to
            </summary>
        </member>
        <member name="M:GAMS.GAMSVariableRecord.#ctor(GAMS.GAMSVariableRecord)">
            <summary>
            Constructor
            </summary>
            <param name="record">GAMSVariableRecord to initialize this instance from</param>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Level">
            <summary>
            Get: Retrieve the the level of this GAMSVariableRecord
            Set: Set the the level of this GAMSVariableRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Marginal">
            <summary>
            Get: Retrieve the marginal of this GAMSVariableRecord
            Set: Set the marginal of this GAMSVariableRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Upper">
            <summary>
            Get: Retrieve the upper bound of this GAMSVariableRecord
            Set: Set the upper bound of this GAMSVariableRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Lower">
            <summary>
            Get: Retrieve the lower bound of this GAMSVariableRecord
            Set: Set the lower bound of this GAMSVariableRecord
            </summary>
        </member>
        <member name="P:GAMS.GAMSVariableRecord.Scale">
            <summary>
            Get: Retrieve the scale factor of this GAMSVariableRecord
            Set: Set the scale factor of this GAMSVariableRecord
            </summary>
        </member>
        <member name="M:GAMS.SolverOptions.Dispose">
            <summary>
            Free unmanaged ressources.
            </summary>
        </member>
        <member name="M:GAMS.SolverOptions.ResetToDefault">
            <summary>
            Reset all GAMS options to default
            </summary>
        </member>
    </members>
</doc>
